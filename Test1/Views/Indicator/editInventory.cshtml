@using IndInv.Helpers
@using IndInv.Models
@using System.Globalization
<script src="~/Scripts/jquery-1.11.0.min.js"></script>
<script src="~/Scripts/CKEditor/ckeditor.js"></script>
<script src="~/Scripts/jquery.handsontable.full.js"></script>
<script src="~/Scripts/undomanager.js"></script>
<!--script src="~/Scripts/jquery.handsontable.full.min.js"></!--script-->
<script type='text/javascript' src="http://wurfljs.com/wurfl.js"></script>
<link rel="stylesheet" media="screen" href="~/Scripts/jquery.handsontable.full.css" />
<script type="text/javascript" src="//code.jquery.com/ui/1.11.2/jquery-ui.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/numeral.js/1.4.5/numeral.min.js"></script>

@model IList<IndInv.Models.ViewModels.InventoryViewModel>
@using IndInv.Models
@{
    ViewBag.Title = "Edit Inventory Table";
    ViewBag.Buttons = "";
    foreach (var analyst in Model.FirstOrDefault().allAnalysts)
    {
        ViewBag.Buttons += "<div id='btn' class='btnSwitch' value=" + analyst.Analyst_ID + " parameter=analystID >" + analyst.First_Name + "</div>";
    }
    ViewBag.Buttons += "<div id='btn' class='btnSwitch' value=" + 0 + " parameter=analystID >" + "All" + "</div>";
    ViewBag.Buttons += "<br/>";
    ViewBag.Buttons += "<div class='btn' id=showValue>Values</div>";
    ViewBag.Buttons += "<div class='btn' id=showTarget>Target</div>";
    ViewBag.Buttons += "<div class='btn' id=showDefinition>Definitions</div>";
    ViewBag.Buttons += "<div class='btn' id=showColor>Colors</div>";
    ViewBag.Buttons += "<div class='btn' id=showAll>All</div>";

    var fiscalYear = Model.FirstOrDefault().Fiscal_Year;

    ViewBag.fiscalYear = fiscalYear;

}
<div class="menu-bar">
    <div class="row header-row">
        <div class="large-5 columns">
            <div class="menu-hover menu-button menu-open menu-coe" field="CoE"><i class="fa fa-folder-open-o"></i>Reports</div>
            <div class="menu-hover menu-button menu-open menu-analyst" field="Analyst"><i class="fa fa-folder-open-o"></i>Table</div>
			<div id="menu-fiscalYear" class="menu-hover menu-button menu-open menu-fiscalYear" field="Fiscal_Year"><i class="fa fa-folder-open-o"></i>@FiscalYear.FYStrFullFormated("FY_0", fiscalYear)</div>
        </div>
        <div class="large-7 columns">
			@if (Roles.IsUserInRole("Consultant"))
   {
				@:<div class="menu-hover menu-button menu-button-left menu-edit-footnotes"><i class="fa fa-pencil-square-o"></i>Footnotes</div>
				@:<div class="menu-hover menu-button menu-button-left menu-edit-coes"><i class="fa fa-pencil-square-o"></i>Edit CoE List</div>
				@:<div class="menu-hover menu-button menu-button-left menu-edit-dictionary"><i class="fa fa-pencil-square-o"></i>Edit Dictionary</div>
			}
			<div class="menu-hover menu-button menu-button-left menu-edit-indicatorlinks"><i class="fa fa-pencil-square-o"></i>Edit Links</div>
			<div class="menu-hover menu-button menu-button-left menu-export"><i class="fa fa-pencil-square-o"></i>Export to Excel</div>
        </div>
    </div>	
</div>
<div class="row">
<label>Search Indicators:<input id="searchgrid" type="text" /></label>
</div>


<div class="rowLong">
    <div id="dataTable" class="nowrap">
	</div>
</div>

<div class="footer">
	<div class="menu-hover menu-button menu-undo"><i class="fa fa-undo"></i>Undo</div>
    <div class="menu-hover menu-button menu-redo"><i class="fa fa-repeat"></i>Redo</div>
	@if(Roles.IsUserInRole("Consultant")){
		<div fiscalYear="@Model.FirstOrDefault().Fiscal_Year" class='toggle-button toggle-format menu-hover'>Turn on Edit with Format </div>
	}
	<div fiscalYear="@Model.FirstOrDefault().Fiscal_Year" class='toggle-button toggle-wordwrap menu-hover'>Toggle Wordwrap </div>
    <div class="calc-title">Sum:<div class ="calc calc-sum">0</div></div><div class="calc-title">Average:<div class ="calc calc-avg">0</div></div><div class="calc-title">Count:<div class ="calc calc-n">0</div></div>
	<div class="menu-hover menu-button menu-refresh" field="coe"><i class="fa fa-refresh"></i>Refresh</div>
</div>

<script type="text/javascript">

	$.fn.drags = function(opt) {
		opt = $.extend({handle:"",cursor:"move"}, opt);

		if(opt.handle === "") {
			var $el = this;
		} else {
			var $el = this.find(opt.handle);
		}

		return $el.css('cursor', opt.cursor).on("mousedown", function(e) {
			if(opt.handle === "") {
				var $drag = $(this).parent().addClass('draggable');
			} else {
				var $drag = $(this).addClass('active-handle').parent().addClass('draggable');
			}
			var z_idx = $drag.css('z-index'),
				drg_h = $drag.outerHeight(),
				drg_w = $drag.outerWidth(),
				pos_y = $drag.offset().top + drg_h - e.pageY,
				pos_x = $drag.offset().left + drg_w - e.pageX;
			$drag.css('z-index', 1000).parents().on("mousemove", function(e) {
				$('.draggable').offset({
					top:e.pageY + pos_y - drg_h,
					left:e.pageX + pos_x - drg_w
				}).on("mouseup", function() {
					$(this).removeClass('draggable').css('z-index', z_idx);
				});
			});
			e.preventDefault(); // disable selection
		}).on("mouseup", function() {
			if(opt.handle === "") {
				$(this).removeClass('draggable');
			} else {
				$(this).removeClass('active-handle').parent().removeClass('draggable');
			}
		});
	};

	$.fn.undrags = function(opt) {
		$(this).removeClass('draggable');
	};

	var currentMousePos = { x: -1, y: -1 };
	$(document).mousemove(function(event) {
		currentMousePos.x = event.pageX;
		currentMousePos.y = event.pageY + $('#pushobjLazy').scrollTop();
	});
	
	if (!Array.prototype.indexOf)
	{
		Array.prototype.indexOf = function(elt /*, from*/)
		{
			var len = this.length >>> 0;

			var from = Number(arguments[1]) || 0;
			from = (from < 0)
				 ? Math.ceil(from)
				 : Math.floor(from);
			if (from < 0)
				from += len;

			for (; from < len; from++)
			{
				if (from in this &&
					this[from] === elt)
					return from;
			}
			return -1;
		};
	}

	$(document).ready(function () {

		function strip_tags(input, allowed) {
			var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
			  commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

			// making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
			allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

			return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
				return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
			});
		}

		function qcolor(instance, td, row, col, prop, value, cellProperties) {
			switch(prop){
				case "FY_Q1": quarter = "FY_Q1_Color"; break;
				case "FY_Q2": quarter = "FY_Q2_Color"; break;
				case "FY_Q3": quarter = "FY_Q3_Color"; break;
				case "FY_Q4": quarter = "FY_Q4_Color"; break;
				case "FY_YTD": quarter = "FY_YTD_Color"; break;
			}
			changedProp = $IndInv.handsontable("getDataAtRowProp",row, quarter)
			Handsontable.renderers.TextRenderer.apply(this, arguments);
			if (changedProp == "cssGreen"){
				td.style.background = 'green';
				td.style.color = 'white';
			}
			if (changedProp == "cssYellow"){
				td.style.background = 'yellow';
				td.style.color = 'black';
			}
			if (changedProp == "cssRed"){
				td.style.background = 'red';
				td.style.color = 'white';
			}
			var isN = $IndInv.handsontable("getDataAtRowProp",row, "N_Value");
			if (isN === true){
				$(td).addClass('nValue'); //add the changeInput class to the actual td
			}

			var escaped = Handsontable.helper.stringify(value);
			escaped = strip_tags(escaped, '<em><b><strong><a><big><div><span>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
			td.innerHTML = escaped;

			return td;
		};

		function compSaved(instance, td, row, col, prop, value, cellProperties) {
			Handsontable.TextCell.renderer.apply(this, arguments);
			if (cellProperties.saved) {//check for new property change in the cell
				$(td).addClass('compSaved'); //add the changeInput class to the actual td
			}
			var isN = $IndInv.handsontable("getDataAtRowProp",row, "N_Value");
			if (isN === true){
				$(td).addClass('nValue'); //add the changeInput class to the actual td
			}
		};
		function tdRender(instance, td, row, col, prop, value, cellProperties) {
			//Handsontable.TextCell.renderer.apply(this, arguments);
			var isN = $IndInv.handsontable("getDataAtRowProp",row, "N_Value");
			if (isN === true){
				$(td).addClass('nValue'); //add the changeInput class to the actual td
			}

			var escaped = Handsontable.helper.stringify(value);
			escaped = strip_tags(escaped, '<em><b><strong><a><big><div><span>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
			td.innerHTML = escaped;

			return td;
		};

		Handsontable.renderers.registerRenderer('qcolor', qcolor);
		Handsontable.renderers.registerRenderer('compSaved', compSaved);
		Handsontable.renderers.registerRenderer('tdRender', tdRender);
		Handsontable.renderers.registerRenderer('tdRender', tdRender);

		var maxed = false
			, resizeTimeout
			, availableWidth
			, availableHeight
			, $window = $(window)
			, $IndInv = $('#dataTable');

		var calculateSize = function () {
			var offset = $IndInv.offset();
			availableWidth = $window.width() - offset.left + $window.scrollLeft();
			availableHeight = $window.height() - offset.top + $window.scrollTop();

			$IndInv.handsontable('updateSettings','width: ' + availableWidth + 'px');
			$IndInv.handsontable('updateSettings','height: ' + availableHeight + 'px');
			//$IndInv.style.height  = availableHeight + 'px';
		};
		$window.on('resize', calculateSize);
		//setInterval(calculateSize, 5000)

		var values  =[];


	    var filterListChose = {
	    	Indicator_ID: ['Indicator_ID'],
			Link_ID: ['Link_ID'],
	    	Identifier: ['Identifier'],
			Area: ['Area'],
	    	Indicator_Type: ['Indicator_Type'],
	        CoE: ['CoE'],
			Footnote: ['Footnote'],
		    Indicator: ['Indicator',''],
		    FY_Data_Source_MSH: ['FY_Data_Source_MSH'],
		    FY_Data_Source_Benchmark: ['FY_Data_Source_Benchmark']
		}
	    var filterListFull = {
	    	Indicator_ID: [],
	    	Link_ID: [],
	    	Identifier: [],
			Area: [],
	    	Indicator_Type: [],
			CoE: [],
			FY_Data_Source_MSH: [],
			FY_Data_Source_Benchmark: [],
			Footnote: []
		};
		for (var prop in filterListChose){
			if (prop === 'Indicator') continue;
			if (prop === 'Footnotes') break;
			if (filterListChose.hasOwnProperty(prop)){
				for (var i=1, len=values.length; i<len; i++){
					var field = filterListChose[prop][0];
					var filterItem = values[i][field];
					if (filterItem == null) continue;
					if(filterItem.length !== 0 && filterItem !== "0"){
						if (filterListFull[field].indexOf(filterItem) === -1){
							filterListFull[field].push(filterItem);
						}
					}
				};
			}
		}

		var delay = (function(){
		    var timer = 0;
		    return function(callback, ms){
		        clearTimeout (timer);
		        timer = setTimeout(callback, ms);
		    };
		})();
		$('#searchgrid').on('keyup', function (event) {
		    var searchText = $(this).val().toLowerCase();
		    filterListChose['Indicator'][1] = searchText;
		    delay(function(){
		        doFilter();
		    }, 500);
		});
        var doFilter = function(){
			var datasrch = jQuery.makeArray(values);
			var searcharray = [];
			for (row = 0, r_len = datasrch.length; row < r_len; row++) {
				var condArr=[];
			    $.each(filterListChose, function(index,data){
                    var currCond = false;
				    if (data.length === 1) {
				        currCond = true;
				    } else {
				        for (var i=1, len=data.length; i<len; i++){
				        	var filterItem = data[i].replace(/&amp;/g, '&');
				        	var field = data[0];
				        	if (field == "Indicator") {filterItem = filterItem.trim()};
				            var currValue = datasrch[row][field];
				            if ((currValue === "" || currValue === null) && filterItem === '(Blank)') {
				            	currCond = true;
				            } else if(currValue == filterItem || filterItem == "" || 
                                (field != "Indicator_ID" && field != "Footnote" && ('' + currValue).toLowerCase().indexOf(filterItem) > -1)){
				                currCond = true;
				            }
				        }
				    }
				    condArr.push(currCond);
			    });
				var allTrue = true;
				for (var i =0, len = condArr.length; i<len;i++){
				    if (condArr[i] !== true){
				        allTrue = false;
				    }
				}
				if (allTrue){
				    searcharray.push(datasrch[row]);
				}
			};
			if (searcharray.length !== 0){
			    $IndInv.handsontable('loadData', searcharray);
			} else {
			    $IndInv.handsontable('loadData', values);
			}
        };
        clearFilter =  function(field, elTH){
        	filterListChose[field] = [field];
        	$('#filter-list > .clicked').removeClass('clicked');
        	elTH.removeClass('filtered')
        	doFilter();
        };


        var refreshView = function(){
        	$.get('editInventory',{AnalystID: "@Model.FirstOrDefault().Analyst_ID", fiscalYear: @Model.FirstOrDefault().Fiscal_Year, Link_ID: @Model.FirstOrDefault().Link_ID },function(result){
						values = result;
						$IndInv.handsontable('loadData', values);
						doFilter();
					});
				}
		refreshView();

        var colHeadersOrg = [
            "<div class='column-letter'>A</div><br>ID <i field='ID' class='fa fa-filter filter-id filter-button' id='filter-id'></i>",
			"<div class='column-letter'>B</div><br>Identifier <i field='Identifier' class='fa fa-filter filter-identifier filter-button' id='filter-identifier'></i>",
			"<div class='column-letter'>C</div><br>CoE  <i field='CoE' class='fa fa-filter filter-coe filter-button' id='filter-coe'></i>",
            "<div class='column-letter'>D</div><br>Indicator",
			"<div class='column-letter'>E</div><br>Area <i field='Area' class='fa fa-filter filter-Area filter-button' id='filter-Area'></i>",
			"<div class='column-letter'>F</div><br>Type <i field='Indicator_Type' class='fa fa-filter filter-Indicator_Type filter-button' id='filter-Indicator_Type'></i>",
			"<div class='column-letter'>G</div><br>Footnotes <i field='Footnote' class='fa fa-filter filter-footnote filter-button' id='filter-footnote'></i>",
            "<div class='column-letter'>H</div><br>@FiscalYear.FYStrFullFormated("FY_3",fiscalYear)",
            "<div class='column-letter'>I</div><br>Sup",
            "<div class='column-letter'>J</div><br>@FiscalYear.FYStrFullFormated("FY_2",fiscalYear)",
            "<div class='column-letter'>K</div><br>Sup ",
            "<div class='column-letter'>L</div><br>@FiscalYear.FYStrFullFormated("FY_1",fiscalYear)",
            "<div class='column-letter'>M</div><br>Sup  ",
            "<div class='column-letter'>N</div><br>@FiscalYear.FYStrFullFormated("FY_0",fiscalYear)" + " Q1",
            "<div class='column-letter'>O</div><br>Sup   ",
            "<div class='column-letter'>P</div><br>@FiscalYear.FYStrFullFormated("FY_0",fiscalYear)" + " Q2",
            "<div class='column-letter'>Q</div><br>Sup    ",
            "<div class='column-letter'>R</div><br>@FiscalYear.FYStrFullFormated("FY_0",fiscalYear)" + " Q3",
            "<div class='column-letter'>S</div><br>Sup     ",
            "<div class='column-letter'>T</div><br>@FiscalYear.FYStrFullFormated("FY_0",fiscalYear)" + " Q4",
            "<div class='column-letter'>U</div><br>Sup      ",
            "<div class='column-letter'>V</div><br>@FiscalYear.FYStrFullFormated("FY_0",fiscalYear)" + " YTD",
            "<div class='column-letter'>W</div><br>Sup           ",
            "<div class='column-letter'>X</div><br>Target",
            "<div class='column-letter'>Y</div><br>Sup        ",
            "<div class='column-letter'>Z</div><br>Comparator",
            "<div class='column-letter'>AA</div><br>Comparator" + " Sup",
            "<div class='column-letter'>AB</div><br>Performance Threshold",
            "<div class='column-letter'>AC</div><br>Sup          ",
            "<div class='column-letter'>AD</div><br>Definition Calculation",
            "<div class='column-letter'>AE</div><br>Target Rationale",
            "<div class='column-letter'>AF</div><br>Comparator Source",
            "<div class='column-letter'>AG</div><br>Data Source MSH  <i field='FY Data Source MSH' class='fa fa-filter filter-datasrc filter-button' id='filter-datasrc'></i>",
            "<div class='column-letter'>AH</div><br>Data Source Benchmark <i field='FY Data Source Benchmark' class='fa fa-filter filter-datasrcbench filter-button' id='filter-datasrcbench'></i>",
            "<div class='column-letter'>AI</div><br>OPEO Lead",
			"<div class='column-letter'>AJ</div><br>Comment"
        ];								
	    var columnsOrg = [
            {data:"Indicator_ID", renderer:"tdRender", readOnly: true},
			{data:"Identifier", renderer:"tdRender", readOnly: true},
			{data:"CoE", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
            {data:"Indicator", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
			{data:"Area", renderer:"tdRender", readOnly: true},
			{data:"Indicator_Type", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
			{data:"Footnote", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
            {data:"FY_3", renderer:"tdRender"},
            {data:"FY_3_Sup", renderer:"tdRender"},
            {data:"FY_2", renderer:"tdRender"},
            {data:"FY_2_Sup", renderer:"tdRender"},
            {data:"FY_1", renderer:"tdRender"},
            {data:"FY_1_Sup", renderer:"tdRender"},
            {data:"FY_Q1", renderer:"qcolor"},
            {data:"FY_Q1_Sup", renderer:"tdRender"},
            {data:"FY_Q2", renderer:"qcolor"},
            {data:"FY_Q2_Sup", renderer:"tdRender"},
            {data:"FY_Q3", renderer:"qcolor"},
            {data:"FY_Q3_Sup", renderer:"tdRender"},
            {data:"FY_Q4", renderer:"qcolor"},
            {data:"FY_Q4_Sup", renderer:"tdRender"},
            {data:"FY_YTD", renderer:"qcolor"},
            {data:"FY_YTD_Sup", renderer:"tdRender"},
            {data:"FY_Target", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
            {data:"FY_Target_Sup", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
            {data:"FY_Comparator", renderer:"compSaved"},
            {data:"FY_Comparator_Sup", renderer:"tdRender"},
            {data:"FY_Performance_Threshold", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
            {data:"FY_Performance_Threshold_Sup", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
            {data:"FY_Definition_Calculation", renderer:"tdRender"},
            {data:"FY_Target_Rationale", renderer:"tdRender" @if (Roles.GetRolesForUser().Contains("Analyst")){ <text>, readOnly: true </text> } },
            {data:"FY_Comparator_Source", renderer:"tdRender"},
            {data:"FY_Data_Source_MSH", renderer:"tdRender"},
            {data:"FY_Data_Source_Benchmark", renderer:"tdRender"},
            {data:"FY_OPEO_Lead", renderer:"tdRender"}
			@if (Roles.GetRolesForUser().Contains("Consultant")){ <text>, {data:"FY_Comment", renderer:"tdRender"} </text> }
	    ];
		var colWidthsOrg = [50, 100, 150, 250, 100, 100, 100, 100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,200,200,200,150,200,100,500];
	    var changesOld = [];

	    $IndInv .handsontable({
	    	jqte: false,
	    	wordwrap: false,
	    	currentRowClassName : 'wrapOn',
			clickBeginsEditing : WURFL.is_mobile? true:false,
			data: values,
			startRows: 1,
			startCols: 1,
			colHeaders: true,
			strechH: 'auto',
			strechW: 'auto',
			scrollH: 'auto',
			scrollV: 'auto',
			width: function () {
				if (maxed && availableWidth === void 0) {
					calculateSize();
				}
				return maxed  ?  availableWidth *0.98 : 300;
			},
			height: function () {
				if (maxed && availableHeight === void 0) {
					calculateSize();
				}
				return maxed  ?  availableHeight*0.93: 300;
			},
			fixedRowsTop: 0,
			fixedColumnsLeft: 4,
			manualColumnResize: true,
			minSpareRows: 0,
			contextMenu: false,
			rowHeaders: false,
			colHeaders: colHeadersOrg,
			columns: columnsOrg,
            colWidths : colWidthsOrg,
            afterChange: function (change, source) {
				if (source === 'loadData') {
					return;
				} else {
					for (var i = 0; i< change.length; ++i){
						updateIndicator(change, i);
					}
				}
				unselect();
			},
            afterSelection: function(r,c,r2,c2){
            	selectedSum =0;
            	selectedAverage =0;
            	selectedN =0;
            	selectedDec =0;
            	var cells = $IndInv.handsontable("getData",r,c,r2,c2);
            	$.each(cells,function(index,row){
            		$.each(row,function(index,cell){
            			var numRaw = cell; //$IndInv.handsontable("getDataAtCell",row,col);
            			if (numRaw != null){
            				var num = parseFloat(numRaw.replace('$','').replace(/[^\d\.\-]/g, ""));
            				if (!isNaN(num)){
            					selectedN +=1
            					selectedSum += num;
            					selectedAverage = selectedSum / selectedN;
            					if (num.countDecimals() > selectedDec){
            						selectedDec = num.countDecimals();
            					}
            				}
            			}
            		});
            	});
            	calcRefresh();
            	unselect();
            },
			afterDeselect: function(){
				selectedSum =0;
				selectedAverage =0;
				selectedN =0;
				selectedDec =0;
				calcRefresh();
				unselect();
			},
			afterChange: function (change, source) {
			    if (source === 'loadData' || source === 'set' || change === null) {
			        return;
			    } else {
			        var changes = [];
			        var changesOld = [];
			        changes = change;
			        for(var i =0, len = changes.length; i<len; i++){
			            var currChange = changes[i];
			            var currChangeOld = [];
			            currChangeOld.push(currChange[0]);
			            currChangeOld.push(currChange[1]);
			            currChangeOld.push(currChange[3]);
			            currChangeOld.push(currChange[2]);
			            changesOld.push(currChangeOld);
			        }
			        updateIndicatorUndoable(changes, changesOld);
			    }
			},
			beforeRemoveRow : function (index, amount){
				deleteIndicator(index);
			}
		});

	    $('.toggle-format').on('click',function(e){
	    	var table = $IndInv.handsontable('getInstance');
	    	table.updateSettings({
	    		jqte: true
	    	});
	    });

	    $('.toggle-wordwrap').on('click',function(e){
	    	var table = $IndInv.handsontable('getInstance');
	    	var wordwrap = $('#dataTable').hasClass('wordwrap');
	    	if (wordwrap){
	    		table.updateSettings({
	    			wordwrap: false
	    		});
	    		$('#dataTable').removeClass('wordwrap');
	    		$('#dataTable').addClass('nowrap');
	    	} else {
	    		table.updateSettings({
	    			wordwrap: true
	    		});
	    		$('#dataTable').addClass('wordwrap');
	    		$('#dataTable').removeClass('nowrap');
	    	}
	    });

		Number.prototype.countDecimals = function () {
			if(Math.floor(this.valueOf()) === this.valueOf()) return 0;
			return this.toString().split(".")[1].length || 0; 
		}
		var selectedSum =0;
		var selectedAverage =0;
		var selectedN =0;
		var selectedDec =0;
		calcRefresh = function(){
			$('.calc-sum').html(selectedSum.toFixed(selectedDec));
			$('.calc-avg').html(selectedAverage.toFixed(selectedDec));
			$('.calc-n').html(selectedN);
		};

		maxed = !maxed;
		$IndInv.handsontable('render');

		updateIndicatorUndoable = function(changes, changesOld){
		    updateIndicator(changes)
		    undoManager.add({
		        undo: function(){
		            updateIndicator(changesOld)
		        },
		        redo: function(){
		            updateIndicator(changes)
		        }
		    });
		};
		$.ajaxSetup({ cache: false });
		function updateIndicator(changes){
			for (var i = 0; i< changes.length; ++i){
		        var change = changes[i];
		        var changedRow = change[0]
		        var changedParameter = change[1];
		        var changedValue = change[3];
		        if (changedValue === null) changedValue = "";
		        var indicatorID = $IndInv.handsontable('getDataAtCell',changedRow,0);

		        if (changedParameter == "FY_Target"){
		        	var firstChar = changedValue.substr(0,1);
		        	var first2Char = changedValue.substr(0,2);
		        	var directions = [];
		        	var directionIDs = [];
		        	changeColour = false;
		        	@foreach (var direction in Model.FirstOrDefault().allDirections)
		   {
					<text>
		        	directions.push('@Html.Raw(direction.Direction)');
		        	directionIDs.push('@Html.Raw(direction.Direction_ID)');
		        	</text>
		   }
		        	var directionID = 1;
		        	for(var i =0; i<directions.length; i++){
		        		if (firstChar == directions[i]){
		        			directionID = directionIDs[i];
		        		}
		        	}
		        	for(var i =0; i<directions.length; i++){
		        		if (first2Char == directions[i].replace('≤','<=').replace('≥','>=')){
		        			directionID = directionIDs[i];
		        		}
		        	}
		        	var updateValueReplace = changedValue.replace('<=','≤').replace('>=','≥');
		        	if (updateValueReplace !== changedValue){
		        		changedValue = updateValueReplace;
		        	}
		        	$.ajax({
		        		url: 'changeDirection',
		        		type: 'POST',
		        		data: JSON.stringify({indicatorID: indicatorID, directionID: directionID, fiscalYear:@fiscalYear }),
		        		async: false,
		        		contentType: 'application/json; charset=utf-8',
		        		success: function (result) {
		        		}
		        	});
		        }
			
				var formatableFields = [
					"FY_3",
					"FY_2",
					"FY_1",
					"FY_Q1",
					"FY_Q2",
					"FY_Q3",
					"FY_Q4",
					"FY_YTD",
					"FY_Target",
					"FY_Comparator"
				] 

				if (formatableFields.indexOf(changedParameter) > 0){
					var formatStr = $IndInv.handsontable("getDataAtRowProp", changedRow, "Format_Code");
					var isString = isNaN(parseInt(changedValue.replace('$','')));
					if (!isString && changedParameter != "Footnote"){
						if (formatStr !== null && formatStr !== ""){
							if(formatStr.indexOf('%') > 0 && changedValue > 1) {
								changedValue = changedValue / 100;
							}
							changedValue = numeral(changedValue).format(formatStr);
						}
					}
				}
		        if (changedParameter != "FY_Q1_Color" && changedParameter != "FY_Q2_Color" && changedParameter != "FY_Q3_Color" && changedParameter != "FY_Q4_Color" && changedParameter != "FY_YTD_Color"){
		            var parameters = {
		            	indicatorID: indicatorID,
		                updateProperty: changedParameter,
		                updateValue: changedValue,
		                updateValueSup: changedValue,
		                fiscalYear: @Model.FirstOrDefault().Fiscal_Year
		            };
		        	$.ajaxSetup({ cache: false });
		        	var ajaxUrl = changedParameter != "Footnote" ? this.action : "setValueFootnotes";
		            $.ajax({
		            	url: ajaxUrl,
		                type: 'POST',
		                data: JSON.stringify(parameters),
		                contentType: 'application/json; charset=utf-8',
		                success: function (result) {
		                	$.get('getIndicatorColor', {indicatorID : indicatorID, fiscalYear: @Model.FirstOrDefault().Fiscal_Year}, function (clrData) {
		                		$IndInv.handsontable("setDataAtRowProp", changedRow, "FY_Q1_Color", clrData.Q1_Color, 'set');
		                		$IndInv.handsontable("setDataAtRowProp", changedRow, "FY_Q2_Color", clrData.Q2_Color, 'set');
		                		$IndInv.handsontable("setDataAtRowProp", changedRow, "FY_Q3_Color", clrData.Q3_Color, 'set');
		                		$IndInv.handsontable("setDataAtRowProp", changedRow, "FY_Q4_Color", clrData.Q4_Color, 'set');
		                		$IndInv.handsontable("setDataAtRowProp", changedRow, "FY_YTD_Color", clrData.YTD_Color, 'set');
		                    });
		                },
		                error: function (request){
		                }
		            });
		        }
		        $IndInv.handsontable("setDataAtRowProp", changedRow, changedParameter, changedValue, 'set');
		    }
		}

		function deleteIndicator(index){
			var parameters = {
				indicatorID: $IndInv.handsontable('getDataAtCell',index,0),
			};
			$.ajax({
				url: 'deleteInventory',
				type: 'POST',
				data: JSON.stringify(parameters),
				contentType: 'application/json; charset=utf-8',
				success: function (result) {
				},
				error: function (request){
				}
			});
		}  

		var alphToNum = function(val) {
			var base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', i, j, result = 0;

			for (i = 0, j = val.length - 1; i < val.length; i += 1, j -= 1) {
				result += Math.pow(base.length, j) * (base.indexOf(val[i]) + 1);
			}

			return result;
		};

		var showColumns = function(toUnhide){
			var colHeaders =[];
		    var columns = [];
		    var colWidths = [];

		    var colHeadersOld = []
		    var columnsOld = [];
		    var colWidthsOld = []

		    var th = $('thead').children();
		    for(var i =0, len = $IndInv.handsontable("countCols"); i<=len; i++){
		        var currHeader = $IndInv.handsontable("getColHeader",i);
		        var colWidth = th.find(':contains(' + currHeader + ')').first().width();
		        columnsOld.push( { data : $IndInv.handsontable("colToProp",i) })
		        colHeadersOld.push(currHeader)
		        colWidthsOld.push(colWidth);
		    };
		    if (toUnhide != null){
		    	var firstCol, lastCol;
		    	if (toUnhide.length > 1){
		    		firstCol = alphToNum($(toUnhide[0]).children().children().children()[0].innerHTML);
		    		lastCol = alphToNum($(toUnhide[toUnhide.length - 1]).children().children().children()[0].innerHTML);
		    	}
		    	for(var i =0, len = columnsOrg.length; i<=len; i++){
		    		var currCol = columnsOrg[i];
		    		var currHeader = colHeadersOrg[i];
		    		var colWidth = colWidthsOrg[i];
		    		var currColAlph = alphToNum($(currHeader).first().text());
		    		if (colHeadersOld.indexOf(currHeader) === -1 && currColAlph <lastCol && currColAlph > firstCol){
		    			columns.push(currCol)
		    			colHeaders.push(currHeader)
		    			colWidths.push(colWidth);
		    		}
		    		if (colHeadersOld.indexOf(currHeader) !== -1){
						columns.push(currCol);
		    			colHeaders.push(currHeader);
						colWidths.push(colWidth);
		    		}
		    	};
		    } else {
		    	var colHeaders = colHeadersOrg;
		    	var columns = columnsOrg;
		    	var colWidths = colWidthsOrg;
		    }
		    var table = $IndInv.handsontable('getInstance');
		    updateColumnsUndoable(table, columns,colHeaders,colWidths,columnsOld,colHeadersOld,colWidthsOld);
		}

		var hideColumns = function(toHide){
		    var toHideHeaders = [];
		    $.each(toHide, function(index, value){
		        var colHeader = $(this).find('.colHeader')[0].innerHTML;
		        toHideHeaders.push(strip_tags(colHeader).toString())//.trim())
		    });
		    var colHeaders = []
		    var columns = [];
		    var colWidths = []

		    var colHeadersOld = []
		    var columnsOld = [];
		    var colWidthsOld = []

		    //var th = $('thead').children();
		    for(var i =0, len = $IndInv.handsontable("countCols"); i<=len; i++){
		    	var currHeader = $IndInv.handsontable("getColHeader",i);
		    	//var colWidth = th.find(':contains(' + currHeader + ')').first().width();
		    	var colWidth = $IndInv.handsontable("getColWidth",i)
		        if (toHideHeaders.indexOf(strip_tags(currHeader,"").toString()) === -1) {//.trim()) === -1){
		            columns.push( { data : $IndInv.handsontable("colToProp",i), renderer: $IndInv.handsontable("getCellRenderer",1,i)})
		            colHeaders.push(currHeader)
		            colWidths.push(colWidth);
		        }
		        columnsOld.push( { data : $IndInv.handsontable("colToProp",i), renderer: $IndInv.handsontable("getCellRenderer",1,i)})
		        colHeadersOld.push(currHeader)
		        colWidthsOld.push(colWidth);
		    };
		    var table = $IndInv.handsontable('getInstance');
		    updateColumnsUndoable(table, columns,colHeaders,colWidths,columnsOld,colHeadersOld,colWidthsOld);
		};
		updateColumnsUndoable = function(table, columns,colHeaders,colWidths,columnsOld,colHeadersOld,colWidthsOld){
		    updateColumns(table, columns,colHeaders,colWidths);
		    undoManager.add({
		        undo: function(){
		            updateColumns(table, columnsOld,colHeadersOld,colWidthsOld);
		        },
		        redo: function(){
		            updateColumns(table, columns,colHeaders,colWidths);
		        }
		    });
		};

		var selectedCellsRange;
		$(document.body).on("contextmenu:focus", ".context-menu-item", function(e){ 
			selectedCellsRange = $IndInv.handsontable("getSelected");
		});

		var selectHeader = $('table > thead').selectable({
		    distance: 1,
		    fiter:'.prheader',
		    start: function(event, ui){
		        
		    }
		})
		var unselect = function(){$('th.ui-selected').removeClass('ui-selected')};

		$(document).on('click','.filter-button', function(e){
		    var el = $(this);
		    var elTH = $(this).closest('th');
		    var filtered = elTH.hasClass('filtered')
		    var filters = [];
		    var filterAvailable = [];
		    var field = el.attr('field');//that.innerHTML;//$(this).find('.colHeader')[0].innerHTML;
		    var dataArr = [];

		    $.each($IndInv.handsontable("getData"),function(index,data){
		        if (field == "ID") { field = "Indicator_ID"; }
		    	var filter = data[field];
		    	if (filter == null) filter = "(Blank)";
		    	if(filter.length !== 0 && filter !== "0"){
		    		if (filterAvailable.indexOf(filter) === -1){
		    			filterAvailable.push(filter);
		    		}
		        }
		    });

		    if (filtered){
		        filters = filterListFull[field]
		    } else {
		        filters = filterAvailable;
		    }
		    filters.sort();

		    var newDiv = "<div id='filter-panel' class='filter-panel'>"
		    newDiv += "<div class='filter-panel-header' id='filter-panel-header'>Filter by: " + field + "<i id='filter-panel-close' class='filter-panel-close fa fa-times'></i></div>"
		    newDiv += "<div class='row'>"
			newDiv += "<div class='filter-panel-search'>"
				newDiv += "<input class='search' id='search_filter' name='Search' type='search' placeholder='Search' />"
				newDiv += "<div id='clear-filter'><i class='fa fa-eraser'></i></div>"
			newDiv += "</div>"
		    newDiv += "<div class='filter-list' id='filter-list'>"
		    $.each(filters, function(index,value){
		        var checked = "";
		        if (filtered){
		            if(filterAvailable.indexOf(value) !== -1){
		                checked = "clicked"
		            }
		        }
		        newDiv += "<div class='filter-item " + checked + "'><div class='filter-title'>" + value + "</div></div>";
		    });
		    newDiv += "</div>"
		    newDiv += "</div>"
		    $('.header').after(newDiv);
		    var leftOverflow = currentMousePos.x + $('#filter-panel').width() - $('.header').width();
		    leftOverflow = leftOverflow > 0 ? leftOverflow : 0;
		    $('#filter-panel').css({
		    	left:  currentMousePos.x - leftOverflow,
		        top:   currentMousePos.y
		    });

		    //$('#filter-panel-header').drags();

		    addFilterItem = function(ele, force){
		    	var filterItem = $(ele).children()[0].innerHTML;
		    	if (!$(ele).hasClass('clicked') || force){
		    	    $(ele).addClass('clicked');
		    	    if (filterListChose[field].indexOf(filterItem) === -1){
		    	        filterListChose[field].push(filterItem);
		    	        doFilter();
		    	    }
		    	} else {
		    		$(ele).removeClass('clicked');
		    		filterListChose[field] = $.grep(filterListChose[field], function(value){
		    			return value != filterItem;
		    		});
		    		doFilter();
		    	}
		    	if(filterListChose[field].length !== 1){
		    		elTH.addClass('filtered');
		    	}else {
		    		elTH.removeClass('filtered');
		    	}
		    }

		    $('#search_filter').focus();
		    $('#search_filter').on('keyup change search click', function (e) {
		    	if (e.which === 13){
		    		$.each( $('#filter-list').children(":visible"),function(index,value){
		    			addFilterItem(this, true);
		    		});
		    	}
		        var valThis = $(this).val().toLowerCase();
		        if (valThis == "") {
		            $('.filter-item').removeClass('textFiltered');
		        } else {
		        	if (field != "Indicator_ID"){
		        		$('.filter-item').each(function () {
		        			var text = $(this).text().toLowerCase();
		        			var listItems;
		        			if (text.indexOf(valThis) >= 0) {
		        				$(this).removeClass('textFiltered');
		        			} else {
		        				$(this).addClass('textFiltered');
		        			}
		        		});
		        	} else {
		        		$('.filter-item').each(function () {
		        			var text = $(this).text().toLowerCase();
		        			var listItems;
		        			if (text == valThis) {
		        				$(this).removeClass('textFiltered');
		        			} else {
		        				$(this).addClass('textFiltered');
		        			}
		        		});
		        	}
		        };
		        $('.filter-item').show();
		        $('.textFiltered').hide();
		    });

		    $('#clear-filter').on('click',function(){
		    	clearFilter(field, elTH);
		    });

		    var filterPanel = $('#filter-panel');
		    $(document, '#filter-panel-close').on('mousedown', function(e){
		    	if ($(e.target).closest('.filter-panel').length > 0  && !!!$(e.target).hasClass('filter-panel-close')){

		    	}else {
		    		filterPanel.undrags();
		    		filterPanel.remove();
		    	}
		    });

		    $('.filter-item').on('click', function(){
		    	addFilterItem(this);
		    });
		});

		$('#the-node2').contextMenu({
			selector: 'th',
			callback: function(key, options){
			},
			items: {
				hideCol: {
				    name: "Hide Column",
				    callback: function(key,options){
				        var toHide = $("th.ui-selected");
				        if (toHide.length === 0) toHide= $(this);
				        hideColumns(toHide);
				        unselect();
				    }
				},
				showCol: {
				    name: "Unhide Columns",
				    callback: function(key,options){
				    	var toUnhide = $("th.ui-selected");
				    	if (toUnhide.length === 0) toUnhide= null;
				    	showColumns(toUnhide);
				        unselect();
				    }
				}

			}
		});

		$('#the-node').contextMenu({
			selector: 'td', 
			callback: function(key, options) {
				
			},

			items: {
				"addNValues": {
					name: "Add N Values to this Indicator",
					callback: function(key,options){
						var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
						var indicatorID = $(this).closest( "tr" ).children().first()[0].innerHTML;
						addNValuesUndoable(row, indicatorID);
					}
				},

				"saveComperatorValue":{
					"name": "Save Comparator Value",
					"items": {
						"toQ1": {
							name: "Q1",
							callback: function(key,options){
								var toSave = [];
								for(var r = selectedCellsRange[0], fR = selectedCellsRange[2]; r <= fR; r++){
									for(var c = selectedCellsRange[1], fC = selectedCellsRange[3]; c <= fC; c++){
										toSave.push($IndInv.handsontable("getCell",r,c));
									}
								}
								if (toSave.length === 0){
									toSave.push($(this));
								}
								var fields = [];
								var fieldQs = [];
								var values = [];
								var oldValues = [];
								var elements = [];
								$.each(toSave, function(index,value){
									var col = $(this).parent().children().index($(this)) + $IndInv.handsontable("colOffset");
									var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
									var quarter = 1;
									var field = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator";
									var fieldQ = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator_Q" + quarter;
									var value = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator");
									//var value =  $(this).first().parent().children('[field="' + field +'"]').children('.pr-input').first().val();
									var oldValue = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator_Q" + quarter);
									//var Oldvalue =  $(this).first().parent().children('[field="' + fieldQ +'"]').children('.pr-input').first().val();
									fields.push(field);
									fieldQs.push(fieldQ);
									values.push(value);
									oldValues.push(oldValue);
									//elements.push($(this));
									elements.push($IndInv.handsontable("getCell",row,col));
								});
								saveComparatorUndoable(elements, fields, fieldQs, values, oldValues);
							}
						},
						"toQ2": {
							name: "Q2",
							callback: function(key,options){
								var toSave = [];
								for(var r = selectedCellsRange[0], fR = selectedCellsRange[2]; r <= fR; r++){
									for(var c = selectedCellsRange[1], fC = selectedCellsRange[3]; c <= fC; c++){
										toSave.push($IndInv.handsontable("getCell",r,c));
									}
								}
								if (toSave.length === 0){
									toSave.push($(this));
								}
								var fields = [];
								var fieldQs = [];
								var values = [];
								var oldValues = [];
								var elements = [];
								$.each(toSave, function(index,value){
									var col = $(this).parent().children().index($(this)) + $IndInv.handsontable("colOffset");
									var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
									var quarter = 2;
									var field = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator";
									var fieldQ = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator_Q" + quarter;
									var value = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator");
									//var value =  $(this).first().parent().children('[field="' + field +'"]').children('.pr-input').first().val();
									var oldValue = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator_Q" + quarter);
									//var Oldvalue =  $(this).first().parent().children('[field="' + fieldQ +'"]').children('.pr-input').first().val();
									fields.push(field);
									fieldQs.push(fieldQ);
									values.push(value);
									oldValues.push(oldValue);
									//elements.push($(this));
									elements.push($IndInv.handsontable("getCell",row,col));
								});
								saveComparatorUndoable(elements, fields, fieldQs, values, oldValues);
							}
						},
						"toQ3": {
							name: "Q3",
							callback: function(key,options){
								var toSave = [];
								for(var r = selectedCellsRange[0], fR = selectedCellsRange[2]; r <= fR; r++){
									for(var c = selectedCellsRange[1], fC = selectedCellsRange[3]; c <= fC; c++){
										toSave.push($IndInv.handsontable("getCell",r,c));
									}
								}
								if (toSave.length === 0){
									toSave.push($(this));
								}
								var fields = [];
								var fieldQs = [];
								var values = [];
								var oldValues = [];
								var elements = [];
								$.each(toSave, function(index,value){
									var col = $(this).parent().children().index($(this)) + $IndInv.handsontable("colOffset");
									var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
									var quarter = 3;
									var field = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator";
									var fieldQ = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator_Q" + quarter;
									var value = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator");
									//var value =  $(this).first().parent().children('[field="' + field +'"]').children('.pr-input').first().val();
									var oldValue = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator_Q" + quarter);
									//var Oldvalue =  $(this).first().parent().children('[field="' + fieldQ +'"]').children('.pr-input').first().val();
									fields.push(field);
									fieldQs.push(fieldQ);
									values.push(value);
									oldValues.push(oldValue);
									//elements.push($(this));
									elements.push($IndInv.handsontable("getCell",row,col));
								});
								saveComparatorUndoable(elements, fields, fieldQs, values, oldValues);
							}
						},
						"toQ4": {
							name: "Q4",
							callback: function(key,options){
								var toSave = [];
								for(var r = selectedCellsRange[0], fR = selectedCellsRange[2]; r <= fR; r++){
									for(var c = selectedCellsRange[1], fC = selectedCellsRange[3]; c <= fC; c++){
										toSave.push($IndInv.handsontable("getCell",r,c));
									}
								}
								if (toSave.length === 0){
									toSave.push($(this));
								}
								var fields = [];
								var fieldQs = [];
								var values = [];
								var oldValues = [];
								var elements = [];
								$.each(toSave, function(index,value){
									var col = $(this).parent().children().index($(this)) + $IndInv.handsontable("colOffset");
									var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
									var quarter = 4;
									var field = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator";
									var fieldQ = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator_Q" + quarter;
									var value = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator");
									//var value =  $(this).first().parent().children('[field="' + field +'"]').children('.pr-input').first().val();
									var oldValue = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator_Q" + quarter);
									//var Oldvalue =  $(this).first().parent().children('[field="' + fieldQ +'"]').children('.pr-input').first().val();
									fields.push(field);
									fieldQs.push(fieldQ);
									values.push(value);
									oldValues.push(oldValue);
									//elements.push($(this));
									elements.push($IndInv.handsontable("getCell",row,col));
								});
								saveComparatorUndoable(elements, fields, fieldQs, values, oldValues);
							}
						},
					},
				},

				separator1: "-----",

				"colorSettings": {
					"name": "Color Type",
					"items": {
						@foreach (var color in Model.FirstOrDefault().allColors)
	  {
						<text>
						"Color_@color.Color_ID" : { "name": "Change to @color.Color_Type",
							className: 'color-choice',
							callback:function(key, options){
								var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
								var indicatorID = $(this).closest( "tr" ).children().first()[0].innerHTML;
								var colorID= @color.Color_ID;
								var oldColorID = $IndInv.handsontable("getDataAtRowProp",row,"FY_Color_ID"); //$(this).closest('tr').attr('colorID');
								changeColorUndoable(indicatorID, colorID, oldColorID,row);
							},
						},
						</text>
	  }
					},
				},
				"directionsSettings": {
					"name": "Color Direction",
					"items": {
						@foreach (var direction in Model.FirstOrDefault().allDirections)
	  {
						<text>
                    	"Direction_@direction.Direction_ID" : { "name": "Change to @direction.Direction",
                    		className: 'color-choice',
                    		callback:function(key, options){
                    			var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
                    			var indicatorID = $(this).closest( "tr" ).children().first()[0].innerHTML;
                    			var directionID= @direction.Direction_ID;
                    			var oldDirectionID = $IndInv.handsontable("getDataAtRowProp",row,"FY_Direction_ID"); //$(this).closest('tr').attr('colorID');
                    			changeDirectionUndoable(indicatorID, directionID, oldDirectionID,row);
							},
						},
						</text>
	  }
					}
				},
				"thresholdSettings": {
					"name": "Color Threshold",
					"items": {
						@foreach (var threshold in Model.FirstOrDefault().allThresholds)
	  {
						<text>
						"Threshold_@threshold.Threshold_ID" : { "name": "Change to @threshold.Threshold",
							className: 'color-choice',
							callback:function(key, options){
								var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
								var indicatorID = $(this).closest( "tr" ).children().first()[0].innerHTML;
								var thresholdID= @threshold.Threshold_ID;
								var oldThresholdID = $IndInv.handsontable("getDataAtRowProp",row,"FY_Threshold_ID"); //$(this).closest('tr').attr('colorID');
								changeThresholdUndoable(indicatorID, thresholdID, oldThresholdID,row);
							}
						},
						</text>
	  }
					}
				}
			}
		});

		saveComparatorUndoable = function(elements, fields, fieldQs, values, oldValues){
			saveComparator(elements, fields, fieldQs, values, oldValues);
			undoManager.add({
				undo: function(){
					saveComparator(elements, fields, fieldQs, oldValues, values, true);
				},
				redo: function(){
					saveComparator(elements, fields, fieldQs, values, oldValues);
				}
			});
		};
		saveComparator =function(elements, fields, fieldQs, values, oldValues, undo){
			$.each(elements, function(index,value){
				var indicatorID = $(this).closest( "tr" ).children().first()[0].innerHTML;

				var colComp = $IndInv.handsontable("propToCol",'FY_Comparator');
				var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
				$IndInv.handsontable("setDataAtRowProp",
					row,
					"FY_Comparator_" + fieldQs[index].toString().slice(-2),
					values[index],
					"set");
				if (undo !== true){
					//$(this).first().parent().children('[field="' + fields[index] +'"]').addClass('comp-saved');
					$IndInv.handsontable("getCellMeta",row,colComp).saved=true;
				} else {
					$IndInv.handsontable("getCellMeta",row,colComp).saved=false;
				}
				$IndInv.handsontable("render");

				var parameters = {
					indicatorID: indicatorID,
					updateProperty: fieldQs[index],
					updateValue: values[index],
					updateValueSup: "%NULL%",
					fiscalYear: @Model.FirstOrDefault().Fiscal_Year,
    			};
    			$.ajax({
    				url: 'setValue',
    				type: 'POST',
    				data: JSON.stringify(parameters),
    				contentType: 'application/json; charset=utf-8',
    				success: function (result) {
    				},
    				error: function (request){
    				}
    			});
    		});
		};

		addNValuesUndoable = function(row, indicatorID){
			addNValues(row, indicatorID);
			undoManager.add({
				undo: function(){
					removeNValues(row, indicatorID);
				},
				redo: function(){
					addNValues(row, indicatorID);
				}
			});
		};
		addNValues = function(row, indicatorID){
			$IndInv.handsontable('alter','insert_row', row + 1);
			$IndInv.handsontable('render');
			$.post('addNValues', { indicatorID : indicatorID, fiscalYear: @ViewBag.fiscalYear }, function(returnedData){
				var indicatorID_N = returnedData.indicatorID;
				var cols = $IndInv.handsontable("getDataAtRow",row  + 1);
				@*$.each(cols,function(index, obj){
					var field = index;
					if (field !== "Indicator_ID" && field !== "N_Value"){
						$.ajax({
							url: 'getValue',
							type: 'GET',
							async: 'false',
							data: { indicatorID: indicatorID_N, field:field, fiscalYear: '@fiscalYear', convertToFull: true },
							contentType: 'application/json; charset=utf-8',
							success: function (result) {
								$IndInv.handsontable("setDataAtRowProp",row + 1,field,result.Value,"set");
							}
						});
					}
				});*@
				$IndInv.handsontable("setDataAtRowProp",row + 1,"Indicator_ID",indicatorID_N,"set");
				$IndInv.handsontable("setDataAtRowProp",row + 1,"N_Value",true,"set");

				var orgTitle = $IndInv.handsontable("getDataAtRowProp",row,"Indicator");
				$IndInv.handsontable("setDataAtRowProp",row + 1,"Indicator","N-Values: " + orgTitle,"set");
    		});
		}
		removeNValues = function(row, indicatorID){
			$IndInv.handsontable('alter','remove_row', row + 1);
			$IndInv.handsontable('render');
			//$.post('removeNValues', { indicatorID: indicatorID, fiscalYear: @ViewBag.fiscalYear });
		}

		undoManager = new UndoManager();
		$.ctrl = function(key, callback, args) {
			var isCtrl = false;
			$(document).on('keydown',function(e) {
				if(!args) args=[]; // IE barks when args is null
        
				if(e.ctrlKey) isCtrl = true;
				if(e.keyCode == key.charCodeAt(0) && isCtrl) {
					callback.apply(this, args);
					return false;
				}
			}).keyup(function(e) {
				if(e.ctrlKey) isCtrl = false;
			});        
		};

		$.ctrl("Z", function(){
			undoManager.undo();
		});

		$.ctrl("Y", function(){
			undoManager.redo();
		});

	    //$('#showColor').on('click', function () {
        var updateColumns = function(table, columns, colHeaders, colWidths){
		    table.updateSettings({
		        strechH: 'last',
		        colWidths: colWidths,//[50, 250, 150, 100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,500,500,500,100,100,100,100,100,100,100],
		        colHeaders: colHeaders,
		        columns: columns
		    });
        };

        $(document).on('click', '.menu-refresh', function(e){
        	refreshView();
        });

        $(document).on('click', '.menu-undo', function(e){
        	undoManager.undo();
        });
        $(document).on('click', '.menu-redo', function(e){
        	undoManager.redo();
        });

        $(document).on('click', '.menu-edit-footnotes', function(e){
        	e.preventDefault();
        	window.open("editFootnotes", "popupWindow", "width=900,height=700,scrollbars=yes");
        });

        $(document).on('click', '.menu-edit-coes', function(e){
            e.preventDefault();
            window.open("editCoEs", "popupWindow", "width=900,height=1000,scrollbars=yes");
        });

        $(document).on('click', '.menu-edit-dictionary', function(e){
        	e.preventDefault();
        	window.open("editWords?fiscalYear=" + @fiscalYear, "popupWindow", "width=900,height=1000,scrollbars=yes");
		    	});

		$(document).on('click', '.menu-edit-indicatorlinks', function(e){
			e.preventDefault();
			window.open("editIndicator_Links?fiscalYear=" + @fiscalYear, "popupWindow", "width=900,height=1000,scrollbars=yes");
		});

		$(document).on('click', '.menu-export', function(e){
			var parameters = [];
			$.each($IndInv.handsontable("getData"),function(index,indicator){
				parameters.push({
					Indicator_ID: indicator.Indicator_ID,
					FY_Q1_Color: indicator.FY_Q1_Color,
					FY_Q2_Color: indicator.FY_Q2_Color,
					FY_Q3_Color: indicator.FY_Q3_Color,
					FY_Q4_Color: indicator.FY_Q4_Color,
					FY_YTD_Color: indicator.FY_YTD_Color
				});
			});
			$.ajax({
				url: 'inventoryToExcel',
				type: 'POST',
				data: JSON.stringify({indicatorList: parameters, fiscalYear: @Model.FirstOrDefault().Fiscal_Year}),
		        contentType: 'application/json; charset=utf-8',
		        success: function(filename) {
		        	window.open("getFile?filename=" + filename, "Excel");
		        }
		    });
		});


        $(document).on('click', '.menu-open', function(e){
        	var field = $(this).attr('field');
        	if (field != "Fiscal_Year") { notFiscalYear = true;} else {notFiscalYear = false;}
        	var buttonEle = $(this);
        	var menuBar =  $(this).closest('.menu-bar');
        	var posX = buttonEle.offset().left, posY = buttonEle.offset().top + buttonEle.height();
        	var htmlContent ="<div class='menu-dropdown' id='menu-dropdown'>";
        	var ajaxUrl = 'get' + field + 's';
        	$.get(ajaxUrl, function(data){
        		if (notFiscalYear){
        			if(field != "CoE") { htmlContent += "<div class='menu-hover menu-dropdown-button' field='" + field + "'>All</div>"; }
        			jQuery.each(data, function (i, value) {
        				if (value['Linked_CoE'] != true){
        					htmlContent += "<div class='menu-hover menu-dropdown-button' id1='0' id ='" + value[field + "_ID"] + "' field='" + field + "'>";
        				} else {
        					htmlContent += "<div class='menu-hover menu-dropdown-button' id1 ='" + value[field + "_ID_1"] + "' id2='" + value[field + "_ID_2"] + "' field='" + field + "'>";
        				}
        				if (field != "CoE") {
        					htmlContent += value[field] + "</div>";
        				}else if (field == "CoE"){
        					htmlContent += value["CoE_Title"] + "</div>";
        				}
        			});
        		}
        		else {
        			jQuery.each(data, function (i, value) {
        				//Use code Instead of ID
        				htmlContent += "<div class='menu-hover menu-dropdown-button' id ='" + value[field + "_Code"] + "' field='" + field + "'>" + value[field] + "</div>"
        			});
        		}
        		htmlContent += "</div>";
        		$('.rowLong').after(htmlContent);
        		$('.menu-dropdown').hide();
        		$('.menu-dropdown').slideDown('slow');
        		$('.menu-dropdown').css({
        			left:  posX,
        			top:   posY+6
        		});
        		$('body').unbind("click").click(function (evt) {
        			$('.menu-dropdown').slideUp('slow',function() { $(this).remove()});
        			$('.menu-dropdown').remove()
        			buttonEle.removeClass('menu-button-pressed');
        		});
        		buttonEle.addClass('menu-button-pressed');
        	});
        });

        $(document).on('click', '.menu-dropdown-button', function(e){
        	var field = $(this).attr('field')
        	var id = $(this).attr('id');
        	var id1 = $(this).attr('id1');
        	var id2 = $(this).attr('id1');
        	if (id !== null){
        		if (field === "CoE"){
        			if (id1 == 0){
        				window.location.href = "../indicator/viewPR?fiscalYear=@ViewBag.fiscalYear&" + field + "ID=" + id;
        			} else {
        				window.location.href = "../indicator/viewPRdbl?fiscalYear=@ViewBag.fiscalYear&" + field + "ID=" + id1 + "&" + field + "ID2=" + id2;
        			}
            	} else if (field === "Analyst"){
            		window.location.href = "../indicator/editInventory?fiscalYear=@ViewBag.fiscalYear&" + field + "ID=" + id;
            	} else if (field === "Fiscal_Year"){
            		currAddress = window.location.href
            		currAddress = currAddress.replace(currAddress.substr(currAddress.indexOf('fiscalYear='),13),"")
            		currAddress = currAddress + "&fiscalYear=" + id;
            		window.location.href = currAddress;
            	}
		} else {
			if (field === "CoE"){
				window.location.href = "../indicator/viewPR?fiscalYear=@ViewBag.fiscalYear"
            	} else if (field === "Analyst"){
            		window.location.href = "../indicator/editInventory?fiscalYear=@ViewBag.fiscalYear"
            	}
		}
        });


		function changeColor(indicatorID, colorID, row){
			$.post('changeColor',{indicatorID: indicatorID, colorID: colorID, fiscalYear:@fiscalYear }, function(clrData){
				$IndInv.handsontable("setDataAtRowProp", row, "FY_Q1_Color", clrData.Q1_Color, 'set');
				$IndInv.handsontable("setDataAtRowProp", row, "FY_Q2_Color", clrData.Q2_Color, 'set');
				$IndInv.handsontable("setDataAtRowProp", row, "FY_Q3_Color", clrData.Q3_Color, 'set');
				$IndInv.handsontable("setDataAtRowProp", row, "FY_Q4_Color", clrData.Q4_Color, 'set');
				$IndInv.handsontable("setDataAtRowProp", row, "FY_YTD_Color", clrData.YTD_Color, 'set');
            });
		}
		function changeColorUndoable(indicatorID, colorID, oldColorID, row){
			changeColor(indicatorID, colorID, row);
			undoManager.add({
				undo: function() {
					changeColor(indicatorID, oldColorID, row);
				},
				redo: function(){
					changeColor(indicatorID, colorID, row);
				}
			});
		}

		function changeDirection(indicatorID, directionID, row){
			$.post('changeDirection',{indicatorID: indicatorID, directionID: directionID, fiscalYear:@fiscalYear }, function(clrData){
            	$IndInv.handsontable("setDataAtRowProp", row, "FY_Q1_Color", clrData.Q1_Color, 'set');
            	$IndInv.handsontable("setDataAtRowProp", row, "FY_Q2_Color", clrData.Q2_Color, 'set');
            	$IndInv.handsontable("setDataAtRowProp", row, "FY_Q3_Color", clrData.Q3_Color, 'set');
            	$IndInv.handsontable("setDataAtRowProp", row, "FY_Q4_Color", clrData.Q4_Color, 'set');
            	$IndInv.handsontable("setDataAtRowProp", row, "FY_YTD_Color", clrData.YTD_Color, 'set');
            });
		}
		function changeDirectionUndoable(indicatorID, directionID, oldDirectionID, row){
			changeDirection(indicatorID, directionID, row);
			undoManager.add({
				undo: function() {
					changeDirection(indicatorID, oldDirectionID, row);
				},
				redo: function(){
					changeDirection(indicatorID, directionID, row);
				}
			});
		}

		function changeThreshold(indicatorID, thresholdID, row){
			$.post('changeThreshold',{indicatorID: indicatorID, thresholdID: thresholdID, fiscalYear:@fiscalYear }, function(clrData){
				$IndInv.handsontable("setDataAtRowProp", row, "FY_Q1_Color", clrData.Q1_Color, 'set');
				$IndInv.handsontable("setDataAtRowProp", row, "FY_Q2_Color", clrData.Q2_Color, 'set');
				$IndInv.handsontable("setDataAtRowProp", row, "FY_Q3_Color", clrData.Q3_Color, 'set');
				$IndInv.handsontable("setDataAtRowProp", row, "FY_Q4_Color", clrData.Q4_Color, 'set');
				$IndInv.handsontable("setDataAtRowProp", row, "FY_YTD_Color", clrData.YTD_Color, 'set');
            });
		}
		function changeThresholdUndoable(indicatorID, thresholdID, oldThresholdID, row){
			changeThreshold(indicatorID, thresholdID, row);
			undoManager.add({
				undo: function() {
					changeThreshold(indicatorID, oldThresholdID, row);
				},
				redo: function(){
					changeThreshold(indicatorID, thresholdID, row);
				}
			});
		}


	});
</script>


<style>

	.rowLong {padding-left:40px;}

    th {
    border-right:none !important;
    white-space: normal !important;
font-family: Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif;
font-weight:300;
font-size:medium!important;
}
    td {
            white-space: normal !important;
font-family: Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif;
font-weight:300;
font-size:medium!important;
    }
    label {
        color:#808080;
		font-size:0.5em;
    }
	.lt-ie9 label {
		padding:5px;
	}

	#dataTable.nowrap  td {
       overflow: hidden !important;
       text-overflow: ellipsis !important;
       white-space:nowrap !important;
  }
	#dataTable.wordwrap  td {
		overflow: visible !important;
		white-space:normal !important;
	}

	.handsontableInput {
		overflow-y:scroll !important;
		font-size:0.5em;
		resize:vertical !important;
	}

	.filter-panel {
        background-color:lightgray !important;
        border:1px solid black;
        padding:0;
        margin:0;
        position: absolute;
        top: 0px;
        left: 0px;
        border: 1px solid black;
        padding: 0px;
        background-color: red;
        height:300px;
        margin:0px;
    }
    .filter-panel-header {
        background-color: rgb(51,51,51);
        padding:5px;
        margin-bottom:0px;
        color:white;
    }
        .filter-panel-header::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f067";
            color:white;
            padding-right:5px;
            padding-right:5px;
        }
    .filter-panel-close {
        color:white;
        float:right;
    }
    .search {
        margin:0px !Important;
    }
    .filter-list {
		color:black;
        height: 219px;
        overflow-y:scroll;
        overflow-x:hidden;
		float:left;
		width:100%;
    }
    .filter-item-title {
        font-weight:bold;
        display:inline;
    }
    .filter-item {
        font-size:small;
        display:block;
        width:100% !important;
        text-align:left !important;
        padding:5px;
    }
        .filter-item::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f0da";
            color:black;
            padding-right:5px;
        }
    .clicked {
        background:#4cff00;
    }
    .included {
        background:#ff6a00;
    }
     th.ui-selecting {
        background-color:#ff6a00;
    }
    th.ui-selected {
        background-color:#ff6a00;
    }

    .filter-button:hover {
        color:#0063FF;
    }
    .filtered > div > span > i {
        color:red;
    }

	td.nValue {
		font-style:italic;
		background-color:#E6E6E6;
	}
	.compSaved {
		background-color: #0063FF !important;
        color: White;
	}

	.menu-dropdown {
        background-color: rgb(2, 69, 137);
        border: 0px 2px 2px 0px;
		position: absolute;
    }
    .menu-title {
        color:white;
        font-size:0.75em;
    }
    .menu-dropdown-button {
        padding: 5px;
        color:white;
        font-size:0.4em !important;
    }

    .menu-button-pressed {
        background-color: rgb(2, 69, 137);
    }

    .menu-bar {
        background-color:#0061a7;
        border-bottom:2px solid rgb(0,51,102);
        border-top:1px solid black;
        padding-left: 17px;
        line-height:30px;
    }

		.menu-bar > div {
			max-width:100% !important;
		}

	.menu-button {
        color:white;
        display:inline;
        font-size:medium;
        margin:0px 3px;
        padding: 3px;
		float:left;
    }


    .menu-refresh {
        float:right;
    }

		.menu-button-left {
		float:right;
	}
	    .menu-hover:hover {
        background-color:#ff6a00;
    }
    .menu-hover:active {
        background-color:red;
    }

	    .footer {
        background-color:#0061a7;
        border-bottom:2px solid rgb(0,51,102);
        border-top:1px solid black;
        padding-left: 17px;
        line-height:7px;
        position: fixed; 
        bottom: 0;
        left: 0;
        right: 0;
        height: 42px;
        z-index:100;
        text-align:right;
		width:100%;
		margin:-18px;
}
    .calc-title, .calc {
        color:white;
        display:inline;
        font-size:small;
        margin:0px 3px;
        padding: 3px;
    }
	.handsontable .manualColumnResizer {
		z-index:500 !important;
		background-color:#BAB5B5 !important;
		width:2px;
		
	}
	.handsontable .manualColumnResizerHandle {
		z-index:501 !important;
	}
	.toggle-button {
		float:left;
		color:white;
        display:inline;
        font-size:small;
        margin:0px 3px;
        padding: 6px;

	}

	.filter-panel-search {
		background-color:white;
		width:100%;
		height:37px;
	}

	#search_filter {
		width:85%;
		float:left;
		border:none;
	}
	#clear-filter {
		float:right;
	}

	.handsontable th {
		line-height: 13px !important;
	}
	.column-letter {
		font-weight:700;
	}
</style>