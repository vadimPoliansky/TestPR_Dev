@using IndInv.Helpers
@model IndInv.Models.ViewModels.PRViewModel
@using IndInv.Models
@using System.Globalization

@{
    ViewBag.Title = "Performance Reports";
    ViewBag.Buttons = "";
    foreach (var analyst in Model.allAnalysts)
    {
        ViewBag.Buttons += "<div id='btn' class='btnSwitch' value=" + analyst.Analyst_ID + " parameter=analystID >" + analyst.First_Name + "</div>";
    }
    ViewBag.Buttons += "<div id='btn' class='btnSwitch' value=" + 0 + " parameter=analystID >" + "All" + "</div>";
    ViewBag.fiscalYear = Model.Fiscal_Year;
}
<div class="menu-bar">
    <div class="row header-row">
        <div class="large-6 columns">
            <div class="menu-hover menu-button menu-open menu-coe" field="CoE"><i class="fa fa-folder-open-o"></i>CoE</div>
            <div class="menu-hover menu-button menu-open menu-analyst" field="Analyst"><i class="fa fa-folder-open-o"></i>Analyst</div>
            <div class="menu-hover menu-button menu-edit-footnotes"><i class="fa fa-pencil-square-o"></i>Footnotes</div>
            <div class="menu-hover menu-button menu-undo"><i class="fa fa-undo"></i>Undo</div>
            <div class="menu-hover menu-button menu-redo"><i class="fa fa-repeat"></i>Redo</div>
        </div>
        <div class="large-6 columns">
            <div class="menu-hover menu-button menu-refresh" field="coe"><i class="fa fa-refresh"></i>Refresh</div>
        </div>
    </div>
</div>

<div class="footer">
                <div class="calc-title">Sum:<div class ="calc calc-sum"></div></div><div class="calc-title">Average:<div class ="calc calc-avg"></div></div><div class="calc-title">Count:<div class ="calc calc-n"></div></div>
</div>

<div class="container">
	<div class="mp-pusher" id="mp-pusher">

		<nav id="menuFilter3D" class="mp-menu">
            <div class="mp-level">
                <h2 class="backBtnMain mp-back"><i class="fa fa-times backBtnMain mp-back"></i>Filter by:</h2>
                <ul>
                    <li>
                        <a href="#"><i class="fa fa-filter"></i>CoE</a>
                        <div class="mp-level">
                            <h2 class="backBtn mp-back"><i class="fa fa-times backBtn mp-back"></i>Filter by CoE:</h2>
                            <ul class="doubleList">
                                @foreach (var coe in Model.allCoEs)
								{
                                    <li>
                                        <small><a href="#" class="filterMenuItem" field="coeID" id="@coe.CoE_ID" name="@coe.CoE"><i class="fa fa-angle-right"></i>@coe.CoE_Abbr </a></small>
                                    </li>
								}
                            </ul>
                        </div>
                    </li>
                    <li>
                        <a href="#"><i class="fa fa-filter"></i>Quadrant</a>
                        <div class="mp-level">
                            <h2 class="backBtn mp-back"><i class="fa fa-times backBtn mp-back"></i>Filter by Quadrant:</h2>
                            <ul>
                                @foreach (var area in Model.allAreas)
								{
                                    <li>
                                        <small><a href="#" class="filterMenuItem" field="areaID" id="@area.Area_ID" name="@area.Area"><i class="fa fa-angle-right"></i>@area.Area</a></small>
                                    </li>
								}
                            </ul>
                        </div>
                    </li>
                    <li>
                        <a href="#"><i class="fa fa-filter"></i>Type</a>
                        <div class="mp-level">
                            <h2 class="backBtn mp-back"><i class="fa fa-times backBtn mp-back"></i>Filter by Type:</h2>
                            <ul>
                                @foreach (var footnote in Model.allFootnotes)
								{
                                    <li>
                                        <small><a href="#" class="filterMenuItem" field="footnoteID" id="@footnote.Footnote_ID" name="@footnote.Footnote"><i class="fa fa-angle-right"></i>@footnote.Footnote</a></small>
                                    </li>
								}
                            </ul>
                        </div>
                    </li>
                </ul>
            </div>
        </nav>


		<div class="scroller">
			<div class="scroller-inner">
				<div id="pushList">
					<input class="search" id="search_input" name="Search" type="search" placeholder="Search" />
					<a><span id="trigger" class="filterExpand menu-trigger"><i class="fa fa-filter fa-2x"></i></span></a>

					<div class="inner-wrap">

						<ul id="myTags" class="tagList">
						</ul>
						<ul class="list">
							<div class="block">
								@{var properties = ModelMetadataProviders.Current;
								  var fiscalYear = Model.Fiscal_Year;
								  var allFields = new List<string>();
								  var allFieldClasses = new List<string>();
								}
								@foreach (var coe in Model.allCoEs.OrderBy(x => x.CoE))
								{
								if (@Model.Analyst_ID.HasValue ? coe.Indicator_CoE_Map.Any(x => x.Indicator.Analyst_ID == @Model.Analyst_ID) : true)
								{
									var footnotes = new List<Footnotes>();
									<fieldset class="prBlock">
										<div class="large-10 columns" style="padding: 0">
											<h3>@Html.DisplayFor(modelItem => coe.CoE)</h3>
										</div>
										<div class="large-1 columns" style="padding: 0">
											<div coeID='@coe.CoE_ID' fiscalYear="@fiscalYear" class='export-button export-Excel menu-hover'>View Excel</div>
										</div>
										<div class="large-1 columns" style="padding: 0">
											<div coeID='@coe.CoE_ID' fiscalYear="@fiscalYear" class='export-button export-PDF menu-hover'>View PDF</div>
										</div>
										<table id="tbl_@coe.CoE_Abbr" class="PR" border="1" style="border-collapse:collapse" runat="server" >
											<tr class="prheader-1">
												<td rowspan="2" class="prheader prheader-1">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Number) </td>
												<td rowspan="2" class="prheader prheader-1">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.Indicator) </td>
												<td rowspan="2" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_3", fiscalYear)).DisplayName</td>
												<td rowspan="2" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_2", fiscalYear)).DisplayName</td>
												<td rowspan="2" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_1", fiscalYear)).DisplayName</td>
												<td rowspan="1" colspan="5" class="prheader prheader-1">@FiscalYear.FYStrFull("FY_Header", fiscalYear)</td>
												<td rowspan="2" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Target").DisplayName</td>
												<td rowspan="2" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Performance_Threshold").DisplayName</td>
												<td rowspan="2" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Comparator").DisplayName</td>
											</tr>

											<tr class="prheader-2 prheader-Final">
												<td rowspan="1" class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_Q1)</td>
												<td rowspan="1" class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_Q2)</td>
												<td rowspan="1" class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_Q3)</td>
												<td rowspan="1" class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_Q4)</td>
												<td rowspan="1" class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_YTD)</td>
											</tr>
											@{var numCount = 1;}
											@foreach (var area_map in coe.Area_CoE_Map.Where(x => Model.allMaps.Where(y => y.Indicator.Area == x.Area).Where(y => y.CoE == coe).Any(y => @Model.Analyst_ID.HasValue ? y.Indicator.Analyst_ID == @Model.Analyst_ID : true)).Where(x => x.Fiscal_Year == fiscalYear).OrderBy(x => x.Area.Sort))
											{
												<tr class='prrow prrow-area' areaID="@area_map.Area_ID" coeID="@coe.CoE_ID">
													<td class="prarea" colspan="100%" mapID="@area_map.Map_ID" area="@Html.DisplayTextFor(modelItem => area_map.Area.Area)">
														<b>@Html.DisplayFor(modelItem => area_map.Area.Area)</b>
														<br />
														@Html.DisplayFor(modelItem => area_map.Objective)
													</td>
												</tr>
												string[,] oldColumns = null;
												List<int> allColspans = new List<int>();
												var allMaps = Model.allMaps.Where(x => x.Fiscal_Year == fiscalYear).Where(e => e.Indicator.Area.Equals(area_map.Area)).Where(d => d.CoE.CoE.Contains(coe.CoE)).OrderBy(f => f.Number).ToList();
												var allNValues = Model.allMaps.Where(x => x.Fiscal_Year == fiscalYear && x.Indicator.Indicator_N_Value == true).ToList();
												var allMapsWithNValues = new List<Indicator_CoE_Maps>();
												foreach (var nValue in allNValues)
												{
													var indicatorIndex = allMaps.FirstOrDefault(x => x.Indicator_ID == nValue.Indicator.Indicator_N_Value_ID);
													if (indicatorIndex != null)
													{
														var position = allMaps.IndexOf(indicatorIndex);
														allMapsWithNValues.Add(indicatorIndex);
														allMaps.Insert(position + 1, nValue);
													}
												}
												foreach (var map in allMaps)
												{
													var indicator = map.Indicator;
													var indicatorType = indicator.GetType();
													var indicatorTitle = ""; int? number = numCount; var skip = false;
													if (map.Indicator.Indicator != null && map.Indicator.Indicator.Contains("%SKIP%") == false)
													{
														indicatorTitle = Html.DisplayFor(modelItem => map.Indicator.Indicator).ToString();
														number = numCount;
													}
													else
													{
														numCount--;
														number = null;
														skip = true;
													}
													int rowSpan;
													var colorID = (Int16)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_", fiscalYear) + "Color_ID").GetValue(indicator, null);
                                                    var directionID = (Int16)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_", fiscalYear) + "Direction_ID").GetValue(indicator, null);
                                                    var thresholdID = (Int16)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_", fiscalYear) + "Threshold_ID").GetValue(indicator, null);
													if (allMapsWithNValues.Contains(map) || !allNValues.Contains(map))
													{
														if (allMapsWithNValues.Contains(map))
														{
															rowSpan = 2;
															@:<tr class='blockFilter coeID-@coe.CoE_ID areaID-@area_map.Area_ID @foreach (var footnote in map.Indicator.Indicator_Footnote_Map) { @:footnoteID-@footnote.Footnote_ID 
															} prrow prrow-hasNValue' areaID="@area_map.Area_ID" coeID="@coe.CoE_ID" mapID="@map.Map_ID" indicatorId="@map.Indicator_ID" colorID="@colorID" directionID="@directionID" thresholdID="@thresholdID">
														}
														else
														{
															rowSpan = 1;
															@:<tr class='blockFilter coeID-@coe.CoE_ID areaID-@area_map.Area_ID @foreach (var footnote in map.Indicator.Indicator_Footnote_Map) { @:footnoteID-@footnote.Footnote_ID
															} prrow'areaID="@area_map.Area_ID" coeID="@coe.CoE_ID" mapID="@map.Map_ID" indicatorId="@map.Indicator_ID" colorID="@colorID" directionID="@directionID" thresholdID="@thresholdID">
														}
														<td rowspan="@rowSpan" class="prtd-id" mapID="@map.Map_ID" >                
														<a class="row-up"><i class="fa fa-sort-asc"></i></a>
														@number
														<a class="row-down"><i class="fa fa-sort-desc"></i></a>
														</td>
														<td rowspan="@rowSpan" indicatorID="@map.Indicator_ID" field="Indicator" class="prtd-title">@indicatorTitle
			   											@{int j = 0;
														foreach (var footnote in map.Indicator.Indicator_Footnote_Map.Where(x => x.Fiscal_Year == fiscalYear).Where(e => e.Indicator_ID == map.Indicator_ID).OrderBy(e => e.Indicator_ID))
														{
															if (j != 0)
															{ Html.Raw(','); }
															@:<sup>@Html.DisplayTextFor(modelItem => footnote.Footnote.Footnote_Symbol)</sup>
															j++;
															if (!footnotes.Contains(footnote.Footnote))
															{
																footnotes.Add(footnote.Footnote);
															}
														}}
														</td>
													}
													else if (allNValues.Contains(map))
													{
														rowSpan = 0;
														@:<tr class='blockFilter coeID-@coe.CoE_ID areaID-@area_map.Area_ID @foreach (var footnote in map.Indicator.Indicator_Footnote_Map) { @:footnoteID-@footnote.Footnote_ID
														} prrow prrow-isNValue'areaID="@area_map.Area_ID" coeID="@coe.CoE_ID" mapID="@map.Map_ID" indicatorId="@map.Indicator_ID" colorID="@colorID" directionID="@directionID" thresholdID="@thresholdID">
													}
													else
													{
														rowSpan = 1;
													}
													numCount++;
													//var format = indicator.Format.Format_Code;
													string[,] columns = new string[,]{
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_3",fiscalYear)).GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_3",fiscalYear) + "_Sup").GetValue(indicator,null),
														"prtd", 
														FiscalYear.FYStrFull("FY_3",fiscalYear), 
														"1",
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_2",fiscalYear)).GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_2",fiscalYear) + "_Sup").GetValue(indicator,null), 
														"prtd", 
														FiscalYear.FYStrFull("FY_2",fiscalYear),
														"1"
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_1",fiscalYear)).GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_1",fiscalYear) + "_Sup").GetValue(indicator,null),
														"prtd", 
														FiscalYear.FYStrFull("FY_1",fiscalYear), 
														"1"
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q1").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q1_Sup").GetValue(indicator,null), 
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q1_Color").GetValue(indicator,null) + " Q1_Color", 
														FiscalYear.FYStrFull("FY_",fiscalYear) + "Q1",
														"1"
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q2").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q2_Sup").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q2_Color").GetValue(indicator,null) + " Q2_Color", 
														FiscalYear.FYStrFull("FY_",fiscalYear) + "Q2", 
														"1"
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q3").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q3_Sup").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q3_Color").GetValue(indicator,null) + " Q3_Color", 
														FiscalYear.FYStrFull("FY_",fiscalYear) + "Q3", 
														"1"
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q4").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q4_Sup").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q4_Color").GetValue(indicator,null) + " Q4_Color", 
														FiscalYear.FYStrFull("FY_",fiscalYear) + "Q4", 
														"1"
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "YTD").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "YTD_Sup").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "YTD_Color").GetValue(indicator,null) + " YTD_Color", 
														FiscalYear.FYStrFull("FY_",fiscalYear) + "YTD", 
														"1"
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Target").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Target_Sup").GetValue(indicator,null), 
														"prtd", FiscalYear.FYStrFull("FY_",fiscalYear) + "Target", 
														rowSpan.ToString()
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Performance_Threshold").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Performance_Threshold_Sup").GetValue(indicator,null), 
														"prtd", FiscalYear.FYStrFull("FY_",fiscalYear) + "Performance_Threshold", 
														rowSpan.ToString()
													},
													{
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator").GetValue(indicator,null),
														(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator_Sup").GetValue(indicator,null), 
														"prtd", 
														FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator", 
														rowSpan.ToString()
													}};
													ViewBag.PRCols = columns;
													if (!skip)
													{
														oldColumns = columns;
													}
													for (int i = 0; i <= columns.GetUpperBound(0); i++)
													{
														if (!allFields.Contains(columns[i, 3]))
														{
															allFields.Add(columns[i, 3]);
															allFieldClasses.Add(columns[i, 2]);
														}

														int colSpan = 1;
														if (i != columns.GetUpperBound(0) && columns[i + 1, 0] == "=")
														{
															int k = 1;
															while (columns[i + k, 0] == "=")
															{
																colSpan++;
																k++;
															}
														}
														else { colSpan = 1; };
														allColspans.Add(colSpan);
														if (columns[i, 0] != "=")
														{
															var tdClass = columns[i, 2];
															if (skip) { tdClass = oldColumns[i, 2]; };
															if (allNValues.Contains(map)) { tdClass = "prtd"; };
															if (columns[i, 4] != "0")
															{
																<td align="center", indicatorID="@map.Indicator_ID", field="@Html.Raw(columns[i, 3])", colspan="@colSpan", rowspan="@Html.Raw(columns[i, 4])", class="prtd @Html.Raw(tdClass)">@Html.Raw(columns[i, 0]) <sup>@Html.Raw(columns[i, 1])</sup></td>
															}
														} else {
															var tdClass = columns[i, 2];
															if (skip) { tdClass = oldColumns[i, 2]; };
															if (allNValues.Contains(map)) { tdClass = "prtd"; };
															if (columns[i, 4] != "0")
															{
																<td align="center", style="display:none" indicatorID="@map.Indicator_ID", field="@Html.Raw(columns[i, 3])", colspan="@colSpan", rowspan="@Html.Raw(columns[i, 4])", class="prtd @Html.Raw(tdClass)"></td>
															}
														}
													}
												@:</tr>
											    }
											}
										</table>
                                        <div class="row pr-footer-row">
                                            <div class="large-6 columns">
									            <div class="footnotes">
									                @{var l = 0;}
									                @foreach (var footnote in footnotes)
									                {
										                @:@footnote.Footnote_Symbol. @footnote.Footnote  
										                l++;
										                if (l % 2 == 0)
										                { <br />}
									                }
                                                </div>
                                            </div>
                                            <div class="large-6 columns">
                                                <img class="pr-footer-image" src="~/Images/quaterly.png" width="8%"/><img class="pr-footer-image" src="~/Images/target.png" width="30%" /><img class="pr-footer-image" src="~/Images/na.png" width="15%"/>
                                            </div>
										<br />
                                        </div>

										<table id="tbl" class="PRDef" border="1" style="border-collapse: collapse" runat="server">
											<tr class="prheader-1">
												<td rowspan="1" class="prheader prheader-1">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Number) </td>
												<td rowspan="1" class="prheader prheader-1">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.Indicator) </td>
												<td rowspan="1" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Definition_Calculation").DisplayName</td>
												<td rowspan="1" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Target_Rationale").DisplayName</td>
												<td rowspan="1" class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Comparator_Source").DisplayName</td>
											</tr>

											@{numCount = 1;}
											@foreach (var area_map in coe.Area_CoE_Map.Where(x => Model.allMaps.Where(y => y.Indicator.Area == x.Area).Where(y => y.CoE == coe).Any(y => @Model.Analyst_ID.HasValue ? y.Indicator.Analyst_ID == @Model.Analyst_ID : true)).Where(x => x.Fiscal_Year == fiscalYear).OrderBy(x => x.Area.Sort))
											{
												<tr class="prrow prrow-area" areaID="@area_map.Area_ID" coeID="@coe.CoE_ID">
													<td class="prarea" colspan="100%" mapID="@area_map.Map_ID" area="@Html.DisplayTextFor(modelItem => area_map.Area.Area)">
														<b>@Html.DisplayFor(modelItem => area_map.Area.Area)</b>
														<br />
														@Html.DisplayFor(modelItem => area_map.Objective)
													</td>
												</tr>
												string[,] oldColumns = null;
												foreach (var map in Model.allMaps.Where(x => x.Fiscal_Year == fiscalYear).Where(e => e.Indicator.Area.Equals(area_map.Area)).Where(d => d.CoE.CoE.Contains(coe.CoE)).OrderBy(f => f.Number))
												{
													var indicatorTitle = ""; int? number = numCount; var skip = false;
													if (map.Indicator.Indicator != null && map.Indicator.Indicator.Contains("%SKIP%") == false)
													{
														indicatorTitle = Html.DisplayFor(modelItem => map.Indicator.Indicator).ToString();
														number = numCount;
													}
													else
													{
														numCount--;
														number = null;
														skip = true;
													}
												<tr class='blockFilter coeID-@coe.CoE_ID areaID-@area_map.Area_ID @foreach (var footnote in map.Indicator.Indicator_Footnote_Map){ @:footnoteID-@footnote.Footnote_ID 
												} prrow' areaID="@area_map.Area_ID" coeID="@coe.CoE_ID" mapID="@map.Map_ID" indicatorId="@map.Indicator_ID" style="background-color:White">
												<td class="prtd-id-def" style="min-width: 1%;">@number</td>
												@{numCount++;}
												<td indicatorID="@map.Indicator_ID" field="Indicator" class="prtd-titleDef">@indicatorTitle
			   									@{int j = 0;
												foreach (var footnote in map.Indicator.Indicator_Footnote_Map.Where(x => x.Fiscal_Year == fiscalYear).Where(e => e.Indicator_ID == map.Indicator_ID).OrderBy(e => e.Indicator_ID))
												{
													if (j != 0)
													{ Html.Raw(','); }
													@:<sup>@Html.DisplayTextFor(modelItem => footnote.Footnote.Footnote_Symbol)</sup>
													j++;
													if (!footnotes.Contains(footnote.Footnote))
													{
														footnotes.Add(footnote.Footnote);
													}
												}}
												</td>
												@{var indicator = map.Indicator;
												var indicatorType = indicator.GetType();
												string[,] columns = new string[,]{
												{
													(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Definition_Calculation").GetValue(indicator,null),
													"", 
													"prtdDef",
													FiscalYear.FYStrFull("FY_",fiscalYear) + "Definition_Calculation"
												},
												{
													(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Target_Rationale").GetValue(indicator,null),
													"",
													"prtdDef", 
													FiscalYear.FYStrFull("FY_",fiscalYear) + "Target_Rationale"},
												{
													(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator_Source").GetValue(indicator,null),
													"", 
													"prtdDef", 
													FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator_Source"
												}};
												if (!skip)
												{
													oldColumns = columns;
												}
												ViewBag.PRColsDefs = columns;
												}
												@for (int i = 0; i <= columns.GetUpperBound(0); i++)
												 {
													 int colSpan = 1;
													 if (i != columns.GetUpperBound(0) && columns[i + 1, 0] == "=")
													 {
														 int k = 1;
														 while (columns[i + k, 0] == "=")
														 {
															 colSpan++;
															 k++;
														 }
													 }
													 else { colSpan = 1; };
													 if (columns[i, 0] != "=")
													 {
														 var tdClass = columns[i, 2];
														 if (skip) { tdClass = oldColumns[i, 2]; };
															<td align="center", indicatorID="@map.Indicator_ID", field="@Html.Raw(columns[i, 3])", colspan="@colSpan", class="prtd @Html.Raw(tdClass)">@Html.Raw(columns[i, 0]) <sup>@Html.Raw(columns[i, 1])</sup></td>
														}
													}
												</tr>
												}
											}
										</table>
									</fieldset>
									}
								}
							</div>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>


	<!-- /pusher -->
</div><!-- /container -->
    
    <div id="menuFilter">
    <nav>
        <h2 class="backBtnMain"><i class="fa fa-times backBtnMain"></i>Filter by:</h2>
        <ul>
            <li>
                <a href="#"><i class="fa fa-filter"></i>CoE</a>
                <h2 class="backBtn"><i class="fa fa-times backBtn"></i>Filter by CoE:</h2>
                <ul class="doubleList">
                    @foreach (var coe in Model.allCoEs)
                    {
                        <li>
                            <small><a href="#" class="filterMenuItem" field="coeID" id="@coe.CoE_ID" name="@coe.CoE"><i class="fa fa-angle-right"></i> @coe.CoE_Abbr </a></small>
                        </li>
                    }
                </ul>
            </li>
            <li>
                <a href="#"><i class="fa fa-filter"></i>Quadrant</a>
                <h2 class="backBtn"><i class="fa fa-times backBtn"></i>Filter by Quadrant:</h2>
                <ul>
                    @foreach (var area in Model.allAreas)
                    {
                        <li>
                            <small><a href="#" class="filterMenuItem" field="areaID" id="@area.Area_ID" name="@area.Area"><i class="fa fa-angle-right"></i> @area.Area</a></small>
                        </li>
                    }
                </ul>
            </li>
            <li>
                <a href="#"><i class="fa fa-filter"></i>Type</a>
                <h2 class="backBtn"><i class="fa fa-times backBtn"></i>Filter by Type:</h2>
                <ul>
                    @foreach (var footnote in Model.allFootnotes)
                    {
                        <li>
                            <small><a href="#" class="filterMenuItem" field="footnoteID" id="@footnote.Footnote_ID" name="@footnote.Footnote"><i class="fa fa-angle-right"></i> @footnote.Footnote</a></small>
                        </li>
                    }
                </ul>
            </li>
        </ul>
    </nav>
</div>

<div class="overlay"></div>
<div class="backToTop"><i class="fa fa-arrow-up"></i></div>

<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="//code.jquery.com/ui/1.11.2/jquery-ui.min.js" ></script>

<script src="~/Scripts/tag-it.min.js"></script>

<link rel="stylesheet" href="../../Scripts/jquery.multilevelpushmenu.css" />
<script type="text/javascript" src="../../Scripts/jquery.multilevelpushmenu.js" ></script>

<script type="text/javascript" src="~/Scripts/classie.js"></script>
<script type="text/javascript" src="~/Scripts/mlpushmenu.js"></script>
<script src="~/Scripts/undomanager.js"></script>

<script type="text/javascript">
    if (!window.jQuery) document.write('<script type="text/javascript" src="../../Scripts/jquery-1.11.0.min.js"><\/script>');
</script>

<script type="text/javascript">
    var currentMousePos = { x: -1, y: -1 };
    $(document).mousemove(function(event) {
        currentMousePos.x = event.pageX;
        currentMousePos.y = event.pageY + $('#pushobjLazy').scrollTop();
    });

    $(document).ready(function () {

    	if (!Array.prototype.filter)
    	{
    		Array.prototype.filter = function(fun)
    		{
    			"use strict";

    			if (this === void 0 || this === null)
    				throw new TypeError();

    			var t = Object(this);
    			var len = t.length >>> 0;
    			if (typeof fun !== "function")
    				throw new TypeError();

    			var res = [];
    			var thisp = arguments[1];
    			for (var i = 0; i < len; i++)
    			{
    				if (i in t)
    				{
    					var val = t[i]; 
    					if (fun.call(thisp, val, i, t))
    						res.push(val);
    				}
    			}

    			return res;
    		};
    	}

        function formatIndicator(obj, formatID){
            var indicatorID = obj.attr('indicatorID');
            $.post('formatIndicator', {indicatorID: indicatorID, formatID: formatID}, function(data){
            });
        }
		
        $(document).on('click', '.export-Excel', function(e){
            var coeID = e.target.attributes.getNamedItem('coeID').value
            var fiscalYear = e.target.attributes.getNamedItem('fiscalYear').value
            var coeIDFilter;
            if (coeID != 0) {
                coeIDFilter = "&coeID=" + coeID;
            }
            window.open("viewPRExcel?fiscalYear=" + fiscalYear + coeIDFilter, "Excel");
        });
        $(document).on('click', '.export-PDF', function(e){
            var coeID = e.target.attributes.getNamedItem('coeID').value
            var fiscalYear = e.target.attributes.getNamedItem('fiscalYear').value
            var coeIDFilter;
            if (coeID != 0) {
                coeIDFilter = "&coeID=" + coeID;
            }
            window.open("viewPRPdf?fiscalYear=" + fiscalYear + coeIDFilter, "PDF");
        });

        function changeDirection(obj, directionID){
            var indicatorID = obj.attr('indicatorID');
            var clickedObjs = obj.closest("tr").children();
            $.post('changeDirection',{indicatorID: indicatorID, directionID: directionID, fiscalYear:@fiscalYear }, function(data){
                $.each(clickedObjs, function(index,obj){
                    var classes = obj.className.split(" ").filter(function(c) {
                        return c.lastIndexOf("css", 0) !== 0;
                    });
                    obj.className = $.trim(classes.join(" "));
                    $.each(classes, function(index, c){
                        if (c.indexOf("Color") !== -1){
                            $(obj).addClass(data[c]);
                        }
                    });
                });
            });
        }
        function changeDirectionUndoable(obj, directionID, oldDirectionID){
            changeDirection(obj, directionID);
            undoManager.add({
                undo: function() {
                    changeDirection(obj, oldDirectionID);
                },
                redo: function(){
                    changeDirection(obj, directionID);
                }
            });
        }
        function changeThreshold(obj, thresholdID){
            var indicatorID = obj.attr('indicatorID');
            var clickedObjs = obj.closest("tr").children();
            $.post('changeThreshold',{indicatorID: indicatorID, thresholdID: thresholdID, fiscalYear:@fiscalYear }, function(data){
                $.each(clickedObjs, function(index,obj){
                    var classes = obj.className.split(" ").filter(function(c) {
                        return c.lastIndexOf("css", 0) !== 0;
                    });
                    obj.className = $.trim(classes.join(" "));
                    $.each(classes, function(index, c){
                        if (c.indexOf("Color") !== -1){
                            $(obj).addClass(data[c]);
                        }
                    });
                });
            });
        }
        function changeThresholdUndoable(obj, thresholdID, oldThresholdID){
            changeThreshold(obj, thresholdID);
            undoManager.add({
                undo: function() {
                    changeThreshold(obj, oldThresholdID);
                },
                redo: function(){
                    changeThreshold(obj, thresholdID);
                }
            });
        }

        function changeColor(obj, colorID){
            var indicatorID = obj.attr('indicatorID');
            var clickedObjs = obj.closest("tr").children();
            $.post('changeColor',{indicatorID: indicatorID, colorID: colorID, fiscalYear:@fiscalYear }, function(data){
            	$.each(clickedObjs, function(index,obj){
                    var classes = obj.className.split(" ").filter(function(c) {
                        return c.lastIndexOf("css", 0) !== 0;
                    });
                    obj.className = $.trim(classes.join(" "));
                    $.each(classes, function(index, c){
                        if (c.indexOf("Color") !== -1){
                            $(obj).addClass(data[c]);
                        }
                    });
                });
            });
        }
    	function changeColorUndoable(obj, colorID, oldColorID){
    		changeColor(obj, colorID);
    		undoManager.add({
    			undo: function() {
    				changeColor(obj, oldColorID);
    			},
    			redo: function(){
    				changeColor(obj, colorID);
    			}
    		});
    	}

    	function setCustomColor(obj, color){
    		var indicatorID = obj.attr('indicatorID');
    		var field = obj.attr('field');
    		$.post('setCustomColor', {indicatorID: indicatorID, field: field, color: color, fiscalYear: @fiscalYear }, function(data){
    			var classes = $(obj).attr('class').split(" ").filter(function(c) {
    				return c.lastIndexOf("css", 0) !== 0;
    			});
    			obj.attr('class', $.trim(classes.join(" ")));
    			$(obj).addClass(color);
    			var oldColorID = $(obj).closest('tr').attr('colorID');
    			if (oldColorID !== "3"){
    				changeColorUndoable(obj, 3, oldColorID);
    			}
    		})
    	}
    	function setCustomColorUndoable(obj, color, oldColor){
    		setCustomColor(obj, color);
    		undoManager.add({
    			undo: function() {
    				setCustomColor(obj, oldColor);
    			},
    			redo: function(){
    				setCustomColor(obj, color);
    			}
    		})
    	}

        @if (ViewBag.PRCols != null)
        {
        <text>
        function addNewIndicator(obj, newIndicatorID, undo){
            exist = (newIndicatorID !== null);
            var coeID = obj.closest( "tr" ).attr("coeID");
            var areaID = obj.closest( "tr" ).attr("areaID");
            var indicatorID = obj.attr("indicatorID") || obj.closest("tr").attr("indicatorID");
            var clickedRow = obj.closest( "tr" );
            var definitions = obj.closest( "table" ).hasClass("PRDef");
            $.post('newIndicatorAtPR', { fiscalYear: @ViewBag.fiscalYear, areaID: areaID, coeID: coeID, indicatorID: indicatorID, newIndicatorID: newIndicatorID}, function(returnedData){
                @{var html = "";
				  html += "<td class='prtd-id'><a class='row-up'><i class='fa fa-sort-asc'></i></a>#<a class='row-down'><i class='fa fa-sort-desc'></i></a></td>";
                  html += "<td class='newrow-td'><input class='newrow-text' field='Indicator' type='text'></td>";
                  for (var i = 0; i < ViewBag.PRCols.GetLength(0); ++i)
                  {
                      html += "<td class='newrow-td'><input class='newrow-text' field='" + ViewBag.PRCols[i, 3] + "' type='text'>";
                      html += "<input class='newrow-text' field='" + ViewBag.PRCols[i, 3] + "_Sup" + "' type='text'></td>";
                  }}
                @{var htmlDef = "";
                  htmlDef += "<td></td>";
                  htmlDef += "<td class='newrow-td'><input class='newrow-text' field='Indicator' type='text'></td>";
                  for (var i = 0; i < ViewBag.PRColsDefs.GetLength(0); ++i)
                  {
                      htmlDef += "<td class='newrow-td'><input class='newrow-text' field='" + ViewBag.PRColsDefs[i, 3] + "' type='text'>";
                  }}
                @{var htmlExist = "";
                  htmlExist += "<td class='prtd-id'><a class='row-up'><i class='fa fa-sort-asc'></i></a>#<a class='row-down'><i class='fa fa-sort-desc'></i></a></td>";
                  htmlExist += "<td colspan='1' class='newrow-td prtd-title' field='Indicator'></td>";
                  for (var i = 0; i < ViewBag.PRCols.GetLength(0); ++i)
                  {
					  htmlExist += "<td colspan='1' class='newrow-td prtd " + ViewBag.PRCols[i, 2] + "' field='" + ViewBag.PRCols[i, 3] + "'></td>";
                  }}
                htmlColumns = "@Html.Raw(html)";
                htmlColumnsDef = "@Html.Raw(htmlDef)";
                htmlExistColumns = "@Html.Raw(htmlExist)";
                if (!exist){
                    clickedRow.after("<tr class='newrow prrow' indicatorID='" + returnedData.indicatorID + "' areaID='" + returnedData.newAreaID + "' mapID = '" + returnedData.mapID + "' coeID = '" + coeID + "' colorID='1' directionID='1' thresholdID='1'>" + (!definitions ? htmlColumns : htmlColumnsDef));
                    $(".newrow-text").on('change keyup paste',function(e){
                        var indicatorID = $(this).closest( "tr" ).attr("indicatorID");
                        var field = $(this).attr("field");
                        var parameters = {
                            indicatorID: indicatorID,
                            updateProperty: field,
                            updateValue: $( this ).val(),
                            updateValueSup: "%NULL%",
                            fiscalYear: @Model.Fiscal_Year,
                        };
                        $.ajax({
                            url: 'setValueOld',
                            type: 'POST',
                            data: JSON.stringify(parameters),
                            contentType: 'application/json; charset=utf-8',
                            success: function (result) {
                            },
                            error: function (request){
                            }
                        }); 
                    });
                } else {
                    $('.justClicked').attr('mapid',returnedData.mapID);
                    $('.justClicked').addClass('clicked');
                    $('.justClicked').removeClass('justClicked');
                    if (returnedData.newAreaID == areaID){
                        var newMap = $('.new-map');
                        newMap.after("<tr class='prrow newrow' indicatorID='" + returnedData.indicatorID + "' areaID='" + returnedData.newAreaID + "' mapID = '" + returnedData.mapID + "' coeID = '" + coeID + "' colorID= '" + returnedData.colorID + "' directionID= '" + returnedData.directionID + "' thresholdID= '" + returnedData.thresholdID + "'>" + htmlExistColumns);
                    } else if (returnedData.newAreaID != 0) {
                        correctAreaRow = $('[coeid="' + coeID + '"][areaid="' + returnedData.newAreaID + '"]').first();
                        correctAreaRow.after("<tr class='prrow newrow' indicatorID='" + returnedData.indicatorID + "' areaID='" + returnedData.newAreaID + "' mapID = '" + returnedData.mapID + "' coeID = '" + coeID + "' colorID= '" + returnedData.colorID + "' directionID= '" + returnedData.directionID + "' thresholdID= '" + returnedData.thresholdID + "'>" + htmlExistColumns);
                    }
                    var newrowTds = $('.newrow-td')
                    $.each(newrowTds,function(index, obj){
                        var indicatorID = $(obj).closest( "tr" ).attr("indicatorID");
                        $(obj).attr('indicatorID', indicatorID);
                        var field = $(obj).attr("field");
                        $.get('getValue', { indicatorID: indicatorID, field:field, fiscalYear: '@fiscalYear' }, function(data){
                            var value = data.Value;
                            if (value == null) value = "";
                            var valueSup = data.Value_Sup;
                            if (valueSup == null) valueSup = "";
                            $(obj).html(value + "<sup>" + valueSup + "</sup>");
                            $(obj).addClass(data.Color);
                            $(obj).removeClass("newrow-td");
                        });
                    });
                    if (undo){
                        $('.new-map').remove()
                        clickedRow.next().removeClass('newrow');
                    }
                }
            });
        }
        </text>
        }

        removeIndicatorUndoable = function(obj, prevObj, deletedRow, indicatorID){
            removeIndicator(obj);
        };
    	function removeIndicator(obj){
    		if (obj.closest( "tr" ).hasClass("prrow-isNValue")){
    			obj.closest( "tr" ).prev().children().attr('rowspan',1);
    		}
    		if (obj.closest( "tr" ).hasClass("prrow-hasNValue")){
    			obj.closest( "tr" ).next().remove();
    		}
    		var mapID = obj.closest( "tr" ).attr("mapID");
    		$('tr[mapID="' + mapID + '"]').remove()
    		$.post('deleteCoEMaps', { mapID : mapID});
    	};

    	merge = function(cells){
    		var i = 0;
    		$.each(cells,function(index,value){
    			currentEle = $(this);

    			var indicatorID = currentEle.closest( "tr" ).attr("indicatorID");
    			var field =currentEle.attr("field");
    			var parameters = {
    				indicatorID: indicatorID,
    				updateProperty: field,
    				updateValue: "=",
    				updateValueSup: "%NULL%",
    				fiscalYear: @Model.Fiscal_Year
    				};
    			$.ajax({
    				url: 'setValueOld',
    				type: 'POST',
    				data: JSON.stringify(parameters),
    				contentType: 'application/json; charset=utf-8',
    				async:false,
    				success: function (result) {
    				},
    				error: function (request){
    				}
    			}); 

    			colSpanCell = currentEle.prevAll('.to-merge-start');
    			colSpan = parseInt(colSpanCell.attr('colSpan'));

    			var owncolSpan = parseInt(currentEle.attr('colSpan'))
    			colSpanCell.attr('colSpan', colSpan + owncolSpan );
    			currentEle.html("");
    			currentEle.hide();
    			i++;
    		});
    	};

    	unmerge = function(uiSelected){
    		var selectedCells = uiSelected;
    		$.each(selectedCells,function(index,value){
    			var cell = $(this);
    			var oldColspan = cell.attr('colspan');
    			var indicatorID = cell.attr('indicatorID');
    			var startField = cell.attr('field');
    			var allFields = [];
    			var allFieldClasses = [];
    			var startFieldIndex;
                            @foreach (var field in allFields)
							{
								@:allFields.push('@field');   
                        	}
                            @foreach (var fieldClass in allFieldClasses)
							{
								@:allFieldClasses.push('@fieldClass');   
                            }
                        	jQuery.each(allFields, function(index, item){
                        		if (item === startField){
                        			startFieldIndex = index;
                        		}
                        	});
                        	var parameters = { indicatorID: indicatorID, startField: startField, allFields: allFields}
                        	$.ajax({
                        		type:"POST",
                        		url: "unmergeCell",
                        		data: parameters,
                        		traditional: true,
                        	});
                        	for(i = oldColspan - 1; i > 0; i--){
                        		cell.attr('colspan','1');
                        		cell.nextAll().eq(i-1).show();
                        	}
                        });
    	}

    	addNValues = function(clickedCell){
    		var clickRow = clickedCell.closest('tr');
    		if (!clickedCell.closest('table').hasClass('PRDef')){
    			var indicatorID = clickedCell.attr("indicatorID");

                @{var htmlNValue = "";
                if (ViewBag.PRCols != null){
                    htmlNValue += "<td></td>";
                    htmlNValue += "<td></td>";
                    for (var i = 0; i < ViewBag.PRCols.GetLength(0); ++i)
                    {
                        htmlNValue += "<td class='newrow-td prtd' colSpan='1' field='" + ViewBag.PRCols[i, 3] + "'></td>";
                    }
                }}

			    $.post('addNValues', { indicatorID : indicatorID, fiscalYear: @ViewBag.fiscalYear }, function(returnedData){
					var html = "@Html.Raw(htmlNValue)";
                    clickRow.closest('tr').addClass('prrow-hasNValue');
                    clickRow.closest('tr').after("<tr class='newrow-NValue prrow prrow-isNValue' indicatorID='" + returnedData.indicatorID + "' mapID = '" + returnedData.mapID + "' coeID = '" + returnedData.coeID + "'>" + html + "<tr");
                    $.each($('.newrow-td'),function(index, obj){
                        var indicatorID = $(obj).closest( "tr" ).attr("indicatorID");
                        $(obj).attr('indicatorID', indicatorID);
                        var field = $(obj).attr("field");
                        $.get('getValue', { indicatorID: indicatorID, field:field, fiscalYear: '@fiscalYear' }, function(data){
                            if (data.Value != null && data.Value_Sup != null){
                                $(obj).html(data.Value + "<sup>" + data.Value_Sup + "</sup>");
                            }
                            $(obj).removeClass("newrow-td");
                        });
                    });
                });
			}
    	}

    	$(document).on('dblclick','.prtd, .prtd-title, .cssGreen, .cssRed, .cssWhite, .cssYellow', function (e) {
    		var indicatorID = e.target.attributes.getNamedItem('indicatorID');
    		var field = e.target.attributes.getNamedItem('field');
    		var currentEle = $(this);
    		var oldValue = $(this).text();
    		e.stopPropagation();

    		$.get('getValue', { indicatorID: indicatorID.value, field: field.value, fiscalYear: @Model.Fiscal_Year}, function (data) {
    			var value = data.Value || "";
    			var value2 = data.Value_Sup || "";
    			updateVal(currentEle, value, value2, indicatorID.value, field.value);
    		});

		});
    	function updateVal(currentEle, value, valueSup, indicatorID, field) {
    		$(currentEle).html('<textarea id="newEdit" indicatorID ="' + indicatorID + 
                                    '" field="' + field +
                                    '" value="' + value + 
                                    '" class="thVal pr-edit-textarea" rows="1">' + value +
                                    '</textarea>' +
                                '<textarea id="newEdit" indicatorID ="' + indicatorID + 
                                    '" field="' + field +
                                    '" value="' + valueSup + 
                                    '" class="thVal2 pr-edit-textarea" rows="1">' + valueSup +
                                    '</textarea>' +
                                '<textarea id="newEdit" indicatorID ="' + indicatorID + 
                                    '" value="' + valueSup + 
                                    '" class="thFootnotes pr-edit-textarea" rows="1">' + valueSup +
                                    '</textarea>'
                                );
    		if (field === "Indicator"){
    			$('.thVal2').hide();
    			$('.thFootnotes').show();
    			$('.thButton').show();
    		} else {
    			$('.thVal2').show();
    			$('.thFootnotes').hide();
    			$('.thButton').hide();
    		}
    		$(".thVal").focus();

    		$('body').unbind("click").click(function (evt) {
    			var updateValue = $.trim($('.thVal').val());
    			var updateValueSup = field !== 'Indicator' ? $.trim($('.thVal2').val()) : $.trim($('.thFootnotes').val())
    			endEditUndoable(evt, currentEle, indicatorID, field, updateValue, updateValueSup, value, valueSup);
    		});
    		$('.pr-edit-textarea:not(.thVal-Def):not(.thVal-Obj)').unbind('keypress').keypress(function (evt) {
    			if (evt.which == 13) {
    				var evt = {target: "none"};
    				var updateValue = $.trim($('.thVal').val());
    				var updateValueSup = field !== 'Indicator' ? $.trim($('.thVal2').val()) : $.trim($('.thFootnotes').val())
    				endEditUndoable(evt, currentEle, indicatorID, field, updateValue, updateValueSup, value, valueSup);
    			};
    		});
    	}
    	endEdit = function(evt, currentEle, indicatorID, field, updateValue, updateValueSup, oldValue, oldValueSup){
    		if (evt !== null){
    			if (evt.target.id == "newEdit" || evt.target.id == "newEdit2" || evt.target.id == "editFootnotes") return;
    		}
    		console.log(currentEle);
    		var colorElement = $(currentEle);
    		var parameters = {
    			indicatorID: indicatorID,
    			updateProperty: field,
    			updateValue: updateValue,
    			updateValueSup: updateValueSup,
    			fiscalYear: @Model.Fiscal_Year,
    		};
    		$.ajax({
    			url: 'setValueOld',
    			type: 'POST',
    			data: JSON.stringify(parameters),
    			contentType: 'application/json; charset=utf-8',
    			success: function (result) {
    				changeColor(colorElement, -1)
    			},
    			error: function (request){
    			}
    		});
    		$(currentEle).html(updateValue + "<sup>" + updateValueSup + "</sup>");
    		currentEle = null;
    		$('body').unbind("click");
    	}


    	$(".prtdDef").dblclick(function (e) {
    		var indicatorID = e.target.attributes.getNamedItem('indicatorID');
    		var field = e.target.attributes.getNamedItem('field');
    		var currentEle = $(this);
    		e.stopPropagation();

    		$.get('getValue', { indicatorID: indicatorID.value, field: field.value, fiscalYear: @Model.Fiscal_Year}, function (data) {
    			var value = data.Value || "";
    			updateDefVal(currentEle, value, indicatorID.value, field.value);
    		});
    	});
    	function updateDefVal(currentEle, value, indicatorID, field) {
    		$(currentEle).html('<textarea id="newEdit" indicatorID ="' + indicatorID + 
                                    '" field="' + field +
                                    '" value="' + value + 
                                    '" class="thVal thVal-Def pr-edit-textarea" rows="1">' + value +
                                    '</textarea>'
                              );
    		$(".thVal").focus();

    		$('body').unbind("click").click(function (evt) {
    			var updateValue = $.trim($('.thVal').val());
    			endEditDefUndoable(evt, currentEle, indicatorID, field, updateValue, value);
    		});
    		$('.pr-edit-textarea:not(.thVal-Def):not(.thVal-Obj)').unbind('keypress').keypress(function (evt) {
    			if (evt.which == 13) {
    				var evt = {target: "none"};
    				var updateValue = $.trim($('.thVal').val());
    				endEditDefUndoable(evt, currentEle, indicatorID, field, updateValue, value);
    			};
    		});
    	};
    	function endEditDef(evt, currentEle, indicatorID, field, updateValue, value){
    		if (evt.target.id == "newEdit") return;
    		var colorElement = $(currentEle);
    		var parameters = {
    			indicatorID: indicatorID,
    			updateProperty: field,
    			updateValue: updateValue,
    			updateValueSup: "%NULL%",
    			fiscalYear: @Model.Fiscal_Year,
    		};
			$.ajax({
				url: 'setValueOld',
				type: 'POST',
				data: JSON.stringify(parameters),
				contentType: 'application/json; charset=utf-8',
				success: function (result) {
				},
				error: function (request){
				}
			});
			$(currentEle).html(updateValue);
			currentEle = null;
			$('body').unbind("click");
		}

    	$(".prarea").dblclick(function (e) {
    		var mapID = e.target.attributes.getNamedItem('mapID');
    		var currentEle = $(this);
    		e.stopPropagation();
            
    		$.get('getAreaMap', { mapID: mapID.value, fiscalYear: @Model.Fiscal_Year}, function (data) {
    			updateObjVal(currentEle, mapID.value, data);
    		});
    	});
    	function updateObjVal(currentEle, mapID, value) {
    		$(currentEle).html('<textarea id="newEdit" mapID ="' + mapID + 
                                    '" value="' + value + 
                                    '" class="thVal thVal-Obj pr-edit-textarea" rows="4">' + value +
                                    '</textarea>'
                                );
    		$(".thVal").focus();

    		$('body').unbind("click").click(function (evt) {
    			var objective = $.trim($(".thVal").val());
    			endEditObjUndoable(evt, currentEle, mapID, objective, value);
    		});
    	};
    	endEditObj = function (evt, currentEle, mapID, objective, value) {
    		if (evt !== null){
    			if (evt.target.id == "newEdit") return;
    		}
    		var area = $(currentEle);
    		var parameters = {
    			mapID: mapID,
    			objective: objective,
    			fiscalYear: @Model.Fiscal_Year,
        	};
        	$.ajax({
        		url: 'setAreaMap',
        		type: 'POST',
        		data: JSON.stringify(parameters),
        		contentType: 'application/json; charset=utf-8',
        		success: function (result) {
        		},
        		error: function (request){
        		}
        	});
        	$(currentEle).html("<b>" + area.attr("area") + " </b><br/>" + objective);
        	currentEle = null;
        	$('body').unbind("click")
        };
		
    	undoManager = new UndoManager();
    	$.ctrl = function(key, callback, args) {
    		var isCtrl = false;
    		$(document).keydown(function(e) {
    			if(!args) args=[]; // IE barks when args is null
        
    			if(e.ctrlKey) isCtrl = true;
    			if(e.keyCode == key.charCodeAt(0) && isCtrl) {
    				callback.apply(this, args);
    				return false;
    			}
    		}).keyup(function(e) {
    			if(e.ctrlKey) isCtrl = false;
    		});        
    	};

    	$.ctrl("Z", function(){
    		undoManager.undo();
    	});

    	$.ctrl("Y", function(){
    		undoManager.redo();
    	});


    	addNewIndicatorUndoable = function(obj, indicatorID, existing){
    		addNewIndicator(obj, indicatorID);
    		undoManager.add({
    			undo: function(){
    				if (existing){
    					var removeObj = $('.newrow').first();
    				} else {
    					var removeObj = obj.closest('tr').next().first();
    				}
    				removeIndicator(removeObj, indicatorID);
    			},
    			redo: function (){
    				addNewIndicator(obj, indicatorID);
    			}
    		});
    	};
    	removeIndicatorUndoable = function(obj, prevObj, deletedRow, indicatorID){
    	    removeIndicator(obj);
    	    undoManager.add({
    	        undo: function() {
    	            //deletedRow.insertAfter(prevObj.closest('tr'));
    	            prevObj.closest('tr').after("<tr class='new-map'><td colspan=99>'ADD'</td></tr>");
    	            addNewIndicator(prevObj, indicatorID, true);
    	        },
    	        redo: function(){
    	        	removeIndicator(prevObj.closest('tr').next().first());
    	        }
    	    });
    	};
    	endEditUndoable = function(evt, currentEle, indicatorID, field, updateValue, updateValueSup, value, value2){
    		endEdit(evt, currentEle, indicatorID, field, updateValue, updateValueSup, value, value2);
    		undoManager.add({
    			undo: function(){
    				endEdit(evt, currentEle, indicatorID, field, value, value2, updateValue, updateValueSup);
    			},
    			redo: function(){
    				endEdit(evt, currentEle, indicatorID, field, updateValue, updateValueSup, value, value2);
    			}
    		});
    	};
    	endEditDefUndoable = function(evt, currentEle, indicatorID, field, updateValue, value){
    		endEditDef(evt, currentEle, indicatorID, field, updateValue, value);
    		undoManager.add({
    			undo: function(){
    				endEditDef(evt, currentEle, indicatorID, field, value, updateValue);
    			},
    			redo: function(){
    				endEditDef(evt, currentEle, indicatorID, field, updateValue, value);
    			}
    		});
    	};
    	endEditObjUndoable = function(evt, currentEle, mapID, objective, value){
    		endEditObj(evt, currentEle, mapID, objective, value);
    		undoManager.add({
    			undo: function(){
    				endEditObj(evt, currentEle, mapID, value, objective);;
    			},
    			redo: function(){
    				endEditObj(evt, currentEle, mapID, objective, value);;
    			}
    		});
    	};
    	mergeUndoable = function(toMerge, unmergeCells){
    		merge(toMerge);
    		undoManager.add({
    			undo: function(){
    				unmerge(unmergeCells);
    			},
    			redo: function(){
    				merge(toMerge);
    			}
    		});
    	};
    	unmergeUndoable = function( toUnmerge, toMerge){
    		unmerge(toUnmerge);
    		undoManager.add({
    			undo: function(){
    				merge(toMerge);
    			},
    			redo: function(){
    				unmerge(toUnmerge);
    			}
    		});
    	};
    	addNValuesUndoable = function(clickedCell){
    		addNValues(clickedCell);
    		undoManager.add({
    			undo: function(){
    				var removeObj = clickedCell.closest('tr').next().first();
    				var indicatorID = removeObj.attr('indicatorID');
    				removeIndicator(removeObj, indicatorID);
    			},
    			redo: function(){
    				addNValues(clickedCell);
    			}
    		});
    	}

		$('#the-node').contextMenu({
            selector: 'td', 
            callback: function(key, options) {
            },

            items: {
                "insB": {name: "Insert New Blank Indicator Below",
                    callback: function(key, options){
                    	addNewIndicatorUndoable($(this), null);
                    }
                },

                insBExs: {name: "Insert Existing Indicator Below",
                    callback: function(key, options){
                        var clickedObj = $(this);
                        var clickedRow = $(this).closest( "tr" );
                        clickedRow.after("<tr class='new-map'><td colspan=99>'ADD'</td></tr>");
                        var coeID = clickedRow.attr("coeID");
                        var newDiv = "<div class='add-indicator-panel'>"
                        newDiv += "<div class='add-indicator-panel-header'>Add Existing Indicator:<i class='add-indicator-panel-close fa fa-times'></i></div>"
                        newDiv += "<input class='search' id='search_input_Indicator' name='Search' type='search' placeholder='Search' />"
                        $.get('getIndicatorList', function (data) {
                            newDiv += "<div class='add-indicator-list'><div>"
                            var indicatorList = $("[coeid='" + coeID + "'] > .prtd-title").map(function(){return Number($(this).attr("indicatorid"));}).get();
                            $.each(data, function(index,value){
                                newDiv += "<div class='add-indicator-item"
                                if ( jQuery.inArray(value.Indicator_ID, indicatorList) != -1 ) {
                                    newDiv += " included"
                                }
                                newDiv += "' indicatorID=" + value.Indicator_ID + "><div class='add-indicator-item-title'>" + value.Indicator_ID + " " + value.Area + ": </div>" + value.Indicator + "</div>";
                            });
                            newDiv += "</div></div>"
                            newDiv += "</div>"
                            $('.block').after(newDiv);
                            $('.add-indicator-panel').hide();
                            $('.add-indicator-panel').slideDown('slow');
                            $('.add-indicator-panel').css({
                                left:  currentMousePos.x,
                                top:   currentMousePos.y
                            });
                            $('.add-indicator-panel-header').drags();

                            $('#search_input_Indicator').on('keyup change search click', function () {
                                var valThis = $(this).val().toLowerCase();
                                if (valThis == "") {
                                    $('.add-indicator-item').removeClass('textFiltered');
                                } else {
                                    $('.add-indicator-item').each(function () {
                                        var text = $(this).text().toLowerCase();
                                        var listItems;
                                        if (text.indexOf(valThis) >= 0) {
                                            $(this).removeClass('textFiltered');
                                        } else {
                                            $(this).addClass('textFiltered');
                                        }
                                    });
                                };
                                $('.add-indicator-item').show();
                                $('.textFiltered').hide();
                            });

                            $('.add-indicator-panel-close').on('click', function(){
                                $(this).closest('.add-indicator-panel').undrags();
                                $(this).closest('.add-indicator-panel').slideUp('slow',function() { $(this).remove()});
                                $('.new-map').remove()
                            });

                            $('.add-indicator-item').on('click', function(){
                                var indicatorID = $(this).attr('indicatorID')
                                if (!$(this).hasClass('included')){
                                    if (!$(this).hasClass('clicked')){
                                        $(this).addClass('justClicked');
                                        addNewIndicatorUndoable(clickedObj, indicatorID, true);
                                    } else {
                                        $(this).removeClass('clicked');
                                        var mapID = $(this).attr('mapID')
                                        $.post('deleteCoEMaps', { mapID : mapID});
                                        $('.newrow[indicatorid="' + indicatorID + '"]').remove();
                                    }
                                }
                            });
                        });
                    }
                },

                "merge":{
                    name: "Merge cells",
                    callback: function(key, options){
                    	mergeUndoable($(".to-merge"), $(".to-merge-start"))
                    }
                },

                "unmerge":{
                    name: "Unmerge cells",
                    callback: function(key, options){
                    	var toUnmerge = $(".ui-selected");
                    	if (toUnmerge.length === 0) toUnmerge= $(this);
                    	var mergedCells = [];
                    	$.each(toUnmerge.nextAll(), function(index,value){
                    		var cell = $(this);
                    		if (! cell.is(":visible")) mergedCells.push(cell);
                    		if (cell.is(":visible")) false;
                    	});
                    	unmergeUndoable(toUnmerge, mergedCells);
                    }
                },

                "addNValues": {
                    name: "Add N Values to this Indicator",
                    callback: function(key,options){
                    	addNValuesUndoable($(this));
                    }
                },

                "foldDelete": {
                    "name": "Remove Indicator From This PR",
                    "items": {
                        "foldDelete": {"name": "Remove From This PR",
                        	callback: function(key, options){
                        	    var cell = $(this);
                                var prevCell = $(this).closest('tr').prev().first()
                        	    var indicatorID = $(this).attr('indicatorID');
                        	    removeIndicatorUndoable( cell, prevCell, cell.closest('tr'), indicatorID );
                            },
                        }
                    }
                },

                separator1: "-----",

                "colorSettings": {
                    "name": "Color Type",
                    "items": {
                        @foreach (var color in Model.allColors)
                        {
                        <text>
                        "Color_@color.Color_ID" : { "name": "Change to @color.Color_Type",
                                className: 'color-choice',
                                callback:function(key, options){
                                    var obj = $(this);
                                    var colorID= @color.Color_ID;
                                	var oldColorID = $(this).closest('tr').attr('colorID');
                                	changeColorUndoable(obj, colorID, oldColorID);
                                },
                            },
                        </text>
                        }
                    },
                },
                "directionsSettings": {
                    "name": "Color Direction",
                    "items": {
                        @foreach (var direction in Model.allDirections)
                        {
                        <text>
                        "Direction_@direction.Direction_ID" : { "name": "Change to @direction.Direction",
                            className: 'color-choice',
                            callback:function(key, options){
                                var obj = $(this);
                                var directionID= @direction.Direction_ID;
                                    var oldDirectionID = $(this).closest('tr').attr('directionID');
                                    changeDirectionUndoable(obj, directionID, oldDirectionID);
                                },
                        },
                        </text>
                        }
                    },
                },
                "thresholdSettings": {
                    "name": "Color Threshold",
                    "items": {
                        @foreach (var threshold in Model.allThresholds)
                        {
                        <text>
                        "Threshold_@threshold.Threshold_ID" : { "name": "Change to @threshold.Threshold",
                            className: 'color-choice',
                            callback:function(key, options){
                                var obj = $(this);
                                var thresholdID= @threshold.Threshold_ID;
                                var oldThresholdID = $(this).closest('tr').attr('thresholdID');
                                changeThresholdUndoable(obj, thresholdID, oldThresholdID);
                            },
                        },
                        </text>
                        }
                    },
                },

                separator2: "-----",

                "setGreen": {name: "Color Cell Green",
                    callback: function(key, options){
                        var color = "cssGreen";
                        var obj = $(this)
                        var oldColor = $.grep(obj.attr('class').split(" "), function(v, i){
                        	return v.indexOf('css') === 0;
                        })[0];
                        setCustomColorUndoable(obj, color, oldColor);
                    }
                },
                "setYellow": {name: "Color Cell Yellow",
                    callback: function(key, options){
                        var color = "cssYellow";
                        var obj = $(this)
                        var oldColor = $.grep(obj.attr('class').split(" "), function(v, i){
                        	return v.indexOf('css') === 0;
                        })[0];
                        setCustomColorUndoable(obj, color, oldColor);
                    }
                },
                "setRed": {name: "Color Cell Red",
                    callback: function(key, options){
                        var color = "cssRed";
                        var obj = $(this)
                        var oldColor = $.grep(obj.attr('class').split(" "), function(v, i){
                        	return v.indexOf('css') === 0;
                        })[0];
                        setCustomColorUndoable(obj, color, oldColor);
                    }
                },

/*                separator2: "-----",

                "formatTest": {name: "FormatTest",
                    callback: function(key,options){
                        var formatID = 2;
                        var obj = $(this);
                        formatIndicator(obj, formatID);
                    }
                },*/

            }
        });
        @*
        $(document).on('click', '.row-up,.row-down', function(){
            var row = $(this).parents("tr:first");
            var mapID = row.attr("mapID");
            var nValueRow;
            if ($(row).children("td:first").attr('rowspan') == 2)
            {
                nValueRow = row.next(); 
            }
            if ($(this).is(".row-up")) {
                var areaChange;
                if (row.prev().attr("mapID")){
                    areaChange = null;
                }else if (!row.prev().prev().hasClass("prheader-Final")){
                    areaChange = -1;
                }
                var intoRow;
                if (row.prev().hasClass('prrow-isNValue')){
                    intoRow = row.prev().prev();
                } else {
                    intoRow = row.prev();
                }
                row.insertBefore(intoRow);
                if (nValueRow != null) { nValueRow.insertAfter(row); }
                $.post("moveCoEMapUp",{mapID: mapID, fiscalYear: @ViewBag.fiscalYear, areaChange: areaChange});
            } else {
                var areaChange;
                if (row.next().attr("mapID")){
                   areaChange= null;
                }else if (row.next().length !== 0){
                    areaChange= 1;
                }
                if (row.next().hasClass('prrow-hasNValue') || row.next().hasClass('prrow-isNValue')){
                    intoRow = row.next().next();
                } else {
                    intoRow = row.next();
                }
                row.insertAfter(intoRow);
                if (nValueRow != null) { nValueRow.insertAfter(row); }
                $.post("moveCoEMapDown",{mapID: mapID, fiscalYear: @ViewBag.fiscalYear, areaChange: areaChange});
            }
        });*@

        $.fn.drags = function(opt) {
            opt = $.extend({handle:"",cursor:"move"}, opt);

            if(opt.handle === "") {
                var $el = this;
            } else {
                var $el = this.find(opt.handle);
            }

            return $el.css('cursor', opt.cursor).on("mousedown", function(e) {
                if(opt.handle === "") {
                    var $drag = $(this).parent().addClass('draggable');
                } else {
                    var $drag = $(this).addClass('active-handle').parent().addClass('draggable');
                }
                var z_idx = $drag.css('z-index'),
                    drg_h = $drag.outerHeight(),
                    drg_w = $drag.outerWidth(),
                    pos_y = $drag.offset().top + drg_h - e.pageY,
                    pos_x = $drag.offset().left + drg_w - e.pageX;
                $drag.css('z-index', 1000).parents().on("mousemove", function(e) {
                    $('.draggable').offset({
                        top:e.pageY + pos_y - drg_h,
                        left:e.pageX + pos_x - drg_w
                    }).on("mouseup", function() {
                        $(this).removeClass('draggable').css('z-index', z_idx);
                    });
                });
                e.preventDefault(); // disable selection
            }).on("mouseup", function() {
                if(opt.handle === "") {
                    $(this).removeClass('draggable');
                } else {
                    $(this).removeClass('active-handle').parent().removeClass('draggable');
                }
            });
        };

        $.fn.undrags = function(opt) {
            $(this).removeClass('draggable');
        };

        $(document).on('click', '.menu-refresh', function(e){
            location.reload();
        });

        $(document).on('click', '.menu-undo', function(e){
            undoManager.undo();
        });
        $(document).on('click', '.menu-redo', function(e){
            undoManager.redo();
        });

        $(document).on('click', '.menu-edit-footnotes', function(e){
        	e.preventDefault();
        	window.open("editFootnotes", "popupWindow", "width=900,height=700,scrollbars=yes");
        });

        $(document).on('click', '.menu-open', function(e){
        	var field = $(this).attr('field');
            var buttonEle = $(this);
            var menuBar =  $(this).closest('.menu-bar');
            var posX = buttonEle.offset().left, posY = buttonEle.offset().top + buttonEle.height();
            var htmlContent ="<div class='menu-dropdown' id='menu-dropdown'>";
            var ajaxUrl = 'get' + field + 's';
            $.get(ajaxUrl, function(data){
                htmlContent += "<div class='menu-hover menu-dropdown-button' field='" + field + "'>All</div>"
                jQuery.each(data, function (i, value) {
                    htmlContent += "<div class='menu-hover menu-dropdown-button' id ='" + value[field + "_ID"] + "' field='" + field + "'>" + value[field] + "</div>"
                });
                htmlContent += "</div>";
                $('.block').after(htmlContent);
                $('.menu-dropdown').hide();
                $('.menu-dropdown').slideDown('slow');
                $('.menu-dropdown').css({
                	left:  posX,
                	top:   posY-115+$("#pushobjLazy").scrollTop()
                });
                $('body').unbind("click").click(function (evt) {
                	$('.menu-dropdown').slideUp('slow',function() { $(this).remove()});
                	$('.menu-dropdown').remove()
                	buttonEle.removeClass('menu-button-pressed');
                });
                buttonEle.addClass('menu-button-pressed');
            });
        });

        $(document).on('click', '.menu-dropdown-button', function(e){
            var field = $(this).attr('field')
            var id = $(this).attr('id');
            if (id !== null){
                window.location.href = "/indicator/viewPR?fiscalYear=@ViewBag.fiscalYear&" + field + "ID=" + id;
            } else {
                window.location.href = "/indicator/viewPR?fiscalYear=@ViewBag.fiscalYear"
            }
        });




    });


</script>

<script type="text/javascript">

    if (!$("html").hasClass("lt-ie9")) {
        new mlPushMenu(document.getElementById('menuFilter3D'), document.getElementById('trigger'));
    }

    $(document).ready(function ($) {

        $(".overlay").hide()

        if ($("html").hasClass("lt-ie9")) {
            $('#menuFilter').multilevelpushmenu({
                fullCollapse: true,
                menuHeight: $(window).height(),
                collapsed: true,
                menuWidth: '30%',
                onExpandMenuStart: function () {
                    $(".overlay").fadeIn("fast");
                },
                onCollapseMenuStart: function () {
                    if ($('#menuFilter').multilevelpushmenu('activemenu').attr('data-level') == 0) {
                        $(".overlay").fadeOut("fast");
                    }
                },
            });

            $('.backItemClass').remove();

            $('.backBtn').on('click', function () {
                $('#menuFilter').multilevelpushmenu('collapse', 0)
            });

            $('.backBtnMain').on('click', function () {
                $('#menuFilter').multilevelpushmenu('collapse')
            });

            $('.filterExpand').click(function () {
                $('#menuFilter').multilevelpushmenu('expand');
            });

            $('#menuFilter').multilevelpushmenu('redraw');
        }

        var hidden = false;

        var delay = (function(){
            var timer = 0;
            return function(callback, ms){
                clearTimeout (timer);
                timer = setTimeout(callback, ms);
            };
        })();
        $('#search_input').on('keyup change search click', function () {
            delay(function(value){
                var valThis = $('#search_input').val().toLowerCase();
                if (valThis == "") {
                    $(".blockFilter").removeClass('textFiltered');
                } else {
                    //$('.blockFilter > li > .row > .titleColumn > .title').each(function () {
                    $('.blockFilter > .prtd-title, .blockFilter > .prtd-titleDef').each(function () {
                        var text = $(this).text().toLowerCase();
                        var listItems;
                        if (text.indexOf(valThis) >= 0) {
                            $(this).closest(".blockFilter").removeClass('textFiltered');
                        } else {
                            $(this).closest(".blockFilter").addClass('textFiltered');
                        }
                    });
                };
                refreshView();
            }, 500);
        });


        $("#myTags").tagit({
            onTagClicked: function (event, ui) {
                $("#myTags").tagit("removeTagByLabel", ui.tagLabel);
            },
            beforeTagRemoved: function (event, ui) {
                var field = ui.tag.attr('field');
                var id = ui.tag.attr('id');
                updateFilterHide(id, field);
                $(".filterMenuItem[id='" + id + "'][field='" + field + "']").closest('li').removeClass('filterCheck');
                refreshView();
            },
            afterTagRemoved: function (event, ui) {
                if ($("#myTags").tagit("assignedTags").length === 0) {
                    $.each(filterClassList, function(index, value){
                        $("." + value).removeClass(value);
                    });
                    hidden=false;
                    refreshView();
                }
            },
        });

        $(".filterMenuItem").on("click", function () {
            var field = $(this).attr('field')
            var name = $.trim($(this).attr('name'));
            var id = $(this).attr('id');
            var tags = $("#myTags").tagit("assignedTags");
            if ($.inArray(name, tags) === -1) {
                $(this).closest('li').addClass('filterCheck');
                $("#myTags").tagit("createTag", name);
                $('ul li:nth-last-child(2)').attr('id', id);
                $('ul li:nth-last-child(2)').attr('field', field);
                updateFilter(id, field);
            } else {
                $(this).parent().parent().removeClass('filterCheck');
                $(this).removeClass('filterCheck');
                $("#myTags").tagit("removeTagByLabel", name);
                //updateFilterHide(id, field);
            }
            refreshView();
        });

        var filterClassList = [];
        function updateFilter(id, field) {
            var filterClass = "filtered-" + field;
            if( $("." + filterClass).length == 0 ){
                $('.blockFilter').addClass(filterClass);
            }
            $('.' + field + "-" + id).removeClass(filterClass);
            if ($.inArray(filterClass, filterClassList) === -1) {
                filterClassList.push(filterClass);
            };
        }
        function updateFilterHide(id, field) {
            var filterClass = "filtered-" + field;
            $('.' + field + "-" + id).addClass(filterClass);
            if ($('.blockFilter').length == $('.' + filterClass).length) {
                $('.blockFilter').removeClass(filterClass);
            }
        }

        function refreshView() {
            $('.blockFilter').show();
            $.each(filterClassList, function(index, value){
                $("." + value).hide();
            });
            $('.textFiltered').hide();
            $.each($('table'), function(index, value) {
                var visibleRows = $(this).find('> tbody > tr').filter(function(){
                    return $(this).css('display') != 'none' && $(this).hasClass('blockFilter');
                }).length;
                if (visibleRows !== 0) { $(this).closest('.prBlock').show();}
                else { $(this).closest('.prBlock').hide(); }

                @foreach(var area in Model.allAreas){
                <text>
                var visibleAreaRows = $(this).find('> tbody > tr').filter(function(){
                    return $(this).css('display') != 'none' && $(this).hasClass('blockFilter') && $(this).attr('areaid') == @area.Area_ID;
                }).length;
                if (visibleAreaRows !== 0) { $(this).find(' > tbody > .prrow-area[areaID="@area.Area_ID"]').show();}
                else { $(this).find(' > tbody > .prrow-area[areaID="@area.Area_ID"]').hide(); }
                </text>
                }
            });
        }

        var offset = 220;
        var duration = 500;
        jQuery(window).scroll(function() {
            if (jQuery(this).scrollTop() > offset) {
                jQuery('.backToTop').fadeIn(duration);
            } else {
                jQuery('.backToTop').fadeOut(duration);
            }
        });
    
        jQuery('.backToTop').click(function(event) {
            event.preventDefault();
            jQuery('html, body').animate({scrollTop: 0}, duration);
            return false;
        })
    });
 </script>

<script>
    var selectedSum =0;
    var selectedAverage =0;
    var selectedN =0;
    var selectObj = $('table').selectable({
        filter: ".prtd",
        distance: 1,
        start: function(event, ui){
        	$('.ui-selectee').removeClass("to-merge");
        	$('.ui-selectee').removeClass("to-merge-start");
        	selectedSum =0;
        	selectedAverage =0;
        	selectedN =0;
        	calcRefresh();
        },
        selected: function(event, ui){
            var cell = $(ui.selected);
            var cellHtml = cell.html();
            var num = parseFloat(cell.html());
            //var num = cell.html()
            if (!isNaN(num)){
                selectedN +=1
                selectedSum += num;
                selectedAverage = selectedSum / selectedN;
            }
            if(cell.prevAll(':visible').first().hasClass("ui-selected")){
            	cell.addClass("to-merge");
            } else {
            	cell.addClass("to-merge-start");
            }
            calcRefresh();
        },
        unselect: function(event, ui){
        	$('.ui-selectee').removeClass("to-merge");
        	$('.ui-selectee').removeClass("to-merge-start");
            selectedSum =0;
            selectedAverage =0;
            selectedN =0;
            calcRefresh();
        }
    });
    
    var unselect = selectObj.selectable("option", "unselect");
    var selected = selectObj.selectable("option", "selected");
    $('.ui-selectee').click(function(e) {
        if (e.ctrlKey){
            var cell = this;
            $(cell).addClass('ui-selected');
            var ui = {selected: cell};
            selected(null, ui);
            calcRefresh();
        }else{
            $('.ui-selectee')
              .removeClass('ui-selected').removeClass("to-merge")
              .parents('.ui-selectable')
              .trigger('selectablestop')
            unselect();
            calcRefresh();
        }
        // you might also want to trigger selectablestop.
    });
    calcRefresh = function(){
        $('.calc-sum').html(selectedSum);
        $('.calc-avg').html(selectedAverage);
        $('.calc-n').html(selectedN);
    };


    var oldRows;
    var sortable = $('tbody').sortable({
        items: "> .prrow:not(.prrow-area)",
        handle: ".prtd-id",
		
        start: function(event, ui){
        	var tbody = $(this);
        	oldRows = tbody.find("> tr:not(.ui-sortable-placeholder)");
        },

        stop: function(event, io){
        	var tbody = $(this);
        	var rows = tbody.find("> tr:not(.ui-sortable-placeholder)");
        	sortUndoable(tbody, rows, oldRows);
        }
    });

    sort = function(rows){
    	var order = [];
    	var areaIDs = [];
    	$.each(rows, function(index, value){
    		var row = $(this);
    		if (row.hasClass('prrow') && !row.hasClass('prrow-area')){
    			var mapID = row.attr('mapID');
    			var areaID = row.prevAll('.prrow-area:first').attr('areaID');
    			order.push(mapID);
    			areaIDs.push(areaID);
    		}
    	});
    	$.ajax({
    		type:"POST",
    		url: "setNewOrder",
    		data: {newOrder: order, areaIDs: areaIDs},
    		traditional: true,
    	});
    };
    sortUndoable = function(tbody, rows, oldRows){
    	sort(rows);
    	undoManager.add({
    		undo: function(){
    			$.each(oldRows, function(index,value){
    				$(tbody).append($(this));
    			});
    			sort(oldRows);
    		},
    		redo: function(){
    			$.each(rows, function(index,value){
    				$(tbody).append($(this));
    			});
    			sort(rows);
    		}
    	});
    };
</script>

<style>
    .block {
        margin:0px 100px !important;
    }

    .pr-footer-row {
        width:100%;
        max-width:100%;
        margin:0px;
        margin-bottom:20px;
    }
    .header-row, footer-row {
        width:100%;
        max-width:100%;
        margin:0px;
    }

    .pr-footer-image{
        float:right;
    }


    .add-indicator-panel {
        background-color:lightgray !important;
        border:1px solid black;
        padding:0;
        margin:0;
        position: absolute;
        top: 0px;
        left: 0px;
        border: 1px solid black;
        padding: 0px;
        background-color: red;
        height:300px;
        margin:0px;
    }
    .add-indicator-panel-header {
        background-color: rgb(51,51,51);
        padding:5px;
        margin-bottom:0px;
        color:white;
    }
        .add-indicator-panel-header::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f067";
            color:white;
            padding-right:5px;
            padding-right:5px;
        }
    .add-indicator-panel-close {
        color:white;
        float:right;
    }
    .search {
        margin:0px !Important;
    }
    .add-indicator-list {
		color:black;
        height: 219px;
        overflow-y:scroll;
        overflow-x:hidden;
		float:left;
		width:100%;
    }
    .add-indicator-item-title {
        font-weight:bold;
        display:inline;
    }
    .add-indicator-item {
        font-size:small;
        display:block;
        width:100% !important;
        text-align:left !important;
        padding:5px;
    }
        .add-indicator-item::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f0da";
            color:black;
            padding-right:5px;
        }
    .clicked {
        background:#4cff00;
    }
    .included {
        background:#ff6a00;
    }
    .new-map {
        display:none;
    }
    .newrow > *:not(.cssGreen):not(.cssYellow):not(.cssRed)  {
        background-color:lightblue !important;
    }

    .prrow tr {
        -webkit-transition: all 0.30s ease-in-out;
        -moz-transition: all 0.30s ease-in-out;
        -ms-transition: all 0.30s ease-in-out;
        -o-transition: all 0.30s ease-in-out;
    }
    .prrow:hover {
        box-shadow: 0 0 10px rgba(81, 203, 238, 1);
        padding: 3px 0px 3px 3px;
        margin: 5px 1px 3px 0px;
        border: 1px solid rgba(81, 203, 238, 1);
    }

    .pr-edit-textarea {
        -webkit-transition: all 0.30s ease-in-out;
        -moz-transition: all 0.30s ease-in-out;
        -ms-transition: all 0.30s ease-in-out;
        -o-transition: all 0.30s ease-in-out;
    }
    .pr-edit-textarea:hover {
        box-shadow: 0 0 10px rgba(255, 106, 0, 1);
        padding: 3px 0px 3px 3px;
        margin: 5px 1px 3px 0px;
        border: 1px solid rgba(255, 106, 0, 1);
    }

    .prheader-1 {
        font-size: 11px;
        background-color: rgb(0,51,102);
        color: White;
        text-align: center;
        padding: 0px;
    }

    .prheader-2 {
        font-size: 11px;
        background-color: White;
        color: Black;
        text-align: center;
        padding: 0px;
    }

    .prarea {
        font-size: 11px;
        background-color: Silver;
        text-align: justify;
        color: Black;
        padding: 5px;
    }

    .prtd-id {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        min-width: 6.5%;
        padding: 0px 2px 0px 2px;
        min-width:1%;
    }

    .prtd-title {
        font-size: 11px;
        background-color: White;
        text-align: justify;
        color: Black;
        min-width: 20% !important;
        max-width: 20% !important;
        word-wrap: break-word;
        padding: 0px 2px 0px 2px;
    }

    .prtd-id-def {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        min-width: 0.05% !important;
        max-width: 0.05% !important;
        padding: 0px 2px 0px 2px;
    }

    .prtd-titleDef {
        font-size: 11px;
        background-color: White;
        text-align: justify;
        color: Black;
        min-width: 20% !important;
        word-wrap: break-word;
        padding: 0px 2px 0px 2px;
    }

    .prtd {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        min-width: 75px;
        padding: 0px;
    }

    .prtdDef {
        font-size: 11px;
        background-color: White;
        text-align: left;
        color: Black;
        min-width: 75px;
        max-width: 15%;
        padding: 0px;
    }

    .cssRed {
        font-size: 11px;
        background-color: rgb(255, 0, 0);
        text-align: center;
        color: White;
        padding: 0px;
    }

    .cssGreen {
        font-size: 11px;
        background-color: rgb(0, 118, 53);
        text-align: center;
        color: White;
        padding: 0px;
    }

    .cssYellow {
        font-size: 11px;
        background-color: rgb(255, 192, 0);
        text-align: center;
        color: Black;
        padding: 0px;
    }

    .cssWhite {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        padding: 0px;
    }

    .inventoryEdit {
        padding: 0 0 0 0;
        margin: 0 0 0 0;
    }

    .textBox1 {
        font-size: 11px;
        width: inherit;
        padding: 0 0 0 0;
        margin: 0 0 0 0;
        border: 0;
        background-color: transparent;
        color: inherit;
    }

    table {
        width:100%;
        margin:0 !important;
    }

    table, th, td {
        border: 1px solid black;
        white-space: normal;
    }

        table tr:nth-of-type(2n) {
            background: none;
        }

    .prrow-hasNValue > td {
        border-bottom:0px none;
    }
    .prrow-isNValue > td {
        border-top:0px none;
        height:20px;
    }

    input[type="text"], textarea {
        width: 100%;
        box-sizing: border-box;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        background-color: lightgray;
    }

    .newrow, .newrow-td, .thVal, .thVal2 {
        padding: 0 0 0 0 !important;
        margin: 0 0 0 0 !important;
    }

    .newrow-text {
        margin: 0 0 0 0 !important;
    }
    .list {
        margin:0px;
        color:white;
    }
    .export-button {
        font-size:medium !important;
        color:black;
        box-shadow: 0 0 1px rgba(81, 203, 238, 1);
        padding: 3px 0px 3px 3px;
        margin: 5px 1px 3px 0px;
        border: 1px solid rgba(81, 203, 238, 1);
    }

        .export-Excel::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f1c3";
            color:black;
            padding-right:5px;
            padding-right:5px;
        }

        .export-PDF::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f1c1";
            color:black;
            padding-right:5px;
            padding-right:5px;
        }


    .footer {
        background-color:#0061a7;
        border-bottom:2px solid rgb(0,51,102);
        border-top:1px solid black;
        padding-left: 17px;
        line-height:7px;
        position: fixed; 
        bottom: 0;
        left: 0;
        right: 0;
        height: 42px;
        z-index:100;
        text-align:right;
		width:100%;
		margin:-18px;
}
    .calc-title, .calc {
        color:white;
        display:inline;
        font-size:small;
        margin:0px 3px;
        padding: 3px;
    }
	
	.menu-dropdown {
        background-color: rgb(2, 69, 137);
        border: 0px 2px 2px 0px;
		position: absolute;
    }
    .menu-title {
        color:white;
        font-size:0.75em;
    }
    .menu-dropdown-button {
        padding: 5px;
        color:white;
        font-size:0.75em;
    }
    .menu-button-pressed {
        background-color: rgb(2, 69, 137);
    }

    .menu-bar {
        background-color:#0061a7;
        border-bottom:2px solid rgb(0,51,102);
        border-top:1px solid black;
        padding-left: 17px;
        line-height:30px;
    }

	.footnotes {
		font-size:12px !important;
		color:black;
	}
	.footnote {
		float:left;
		width:50%;
	}

    .menu-button {
        color:white;
        display:inline;
        font-size:medium;
        margin:0px 3px;
        padding: 3px;
    }


    .menu-refresh {
        float:right;
    }

    .ui-selecting {
        outline:1px solid #ff6a00;
    }

    .ui-selected {
        outline:1px solid red;
    }
    .menu-hover:hover {
        background-color:#ff6a00;
    }
    .menu-hover:active {
        background-color:red;
    }

</style>

<style>


    .container {
        overflow: visible;
        height:100%;
    }
    .scroller {
        overflow-y:visible;
    }

    #menuFilter {
        display:none;
    }
    .lt-ie9 #menuFilter {
        display:block;
    }

    .lt-ie9 .mp-menu {
        visibility:hidden;
    }
    .lt-ie9 .scroller {
        position:absolute;
        top:0px;
        left:0px;
        width:100%;
        /*margin-left:-300px;*/
    }
    .lt-ie9 .fa-rotate-90 {
        padding-right:10px;
        margin-top:10px;
        background:none;
        vertical-align:central;
    }

    .mp-menu ul li > a {
        padding:9px;
        font-size:1.5em;
        font-family:'Open Sans Condensed', sans-serif;
        color:#0094ff;
        line-height:1em;
    }
        .mp-menu ul li > a::after {
            font-size:1em;
            padding-right:9.6px;
            color:#0094ff;
            float:left;
            font-family: FontAwesome;
            content: "\f104";
            font-weight:normal;
            font-style:normal;
        }

    .mp-menu a{
        font-size: 1.5em;
        padding: 4px 0px 4px 15px;
        display: block;
    }

    h2 > .fa-times, a > .fa-filter {
        float:right;
    }

    .area {
        font-weight:300;
        color:rgb(128, 128, 128);
        display:block;
        margin-left:9px;
    }
    .coe {
        font-weight:800;
    }
    .title {
        
    }
    
    .blockContent {
        padding:5px;
        max-width:900px !important;
        display:block;
    }
        .blockContent:hover {
            background-color:#0081de;
            color:rgb(255, 255, 255) !important;
        }
    .titleColumn {
        text-align:right;
    }

    .backToTop {
        position: fixed;
        bottom: 0px;
        right: 0px;
        text-decoration: none;
        color: #000000;
        background-color: rgba(135, 135, 135, 0.50);
        font-size: 12px;
        padding: 1em;
        display: none;
    }

    .backToTop:hover {    
        background-color: rgba(135, 135, 135, 0.50);
    }

    .left-off-canvas-menu {
        height: 100%;
    }


    #myTags {
        width:100%;
    }

    .tagit-choice {
        background-color:#FFF0B3 !important;
        padding:15px;
        width:100%;
    }
    .tagit-choice:first-child {
        margin-top:3px;
    }
    .tagit-label {
        color:black;
        font-weight:bold;
    }
    .text-icon {
        float:right;
        position:relative;
        top:-10px;
        font-size:xx-large;
        color:black;
    }

    .doubleList {
        -moz-column-count: 2;
        -moz-column-gap: 0px;
        -webkit-column-count: 2;
        -webkit-column-gap: 0px;
        column-count: 2;
        column-gap: 0px;
    }
    .tagList {
        -moz-column-count: 1;
        -moz-column-gap: 0px;
        -webkit-column-count: 1;
        -webkit-column-gap: 0px;
        column-count: 1;
        column-gap: 0px;
        list-style-type: none;
        padding:0; margin:0;
    }
    .tagit-new {
        display:none;
    }

    .search {
        float:left;
        background-image: url(http://www.levenmetwater.nl/static/global/images/icon-search.png);
        background-position: 10px center;
        background-repeat: no-repeat;
        margin: 0px !important;
        width: 100%;
        height: 40px;
        padding: 10px 45px 10px 10px !important;
        text-indent: 20px;
        -webkit-transition: all 0.2s;
        -moz-transition: all 2s;
        transition: all 0.2s;
        border:none;
    }
    .lt-ie9 .search {
        padding-left:30px !important;
    }
        .search:focus {
            background-position: -20px center;
            text-indent: 20px;
        }

        .search::-webkit-search-cancel-button{
            position:relative;
            right:25px;
  
            -webkit-appearance: none;
            height: 20px;
            width: 20px;
            border-radius:0px;
        }
            .search::-webkit-search-cancel-button::before {
                font-family: FontAwesome;
                font-size:large;
                content: "\f057";
                color:black;

            }

    .filterExpand {
        color:white;
        position:relative;
        top:-37px;
        padding: 5px 0 0px 15px;
        float: right;
        width: 50px;
        margin: 0px !important;
        font-size: small;
        height: 37px !important;
        overflow: hidden !important;
        vertical-align: middle;
        background-color: #0094ff;
    }


    #menuFilter .multilevelpushmenu_wrapper h2, #menuFilter3D h2 {
	    font-size: medium !important;
	    line-height: 1em;
	    font-weight: lighter;
        margin-top:0;
	    color: white;
        height:50px;
	    padding: 1em .4em .4em .4em;
        background-color: #0094ff;
        font-family: Optima, Segoe, "Segoe UI", Candara, Calibri, Arial, sans-serif;
    }

    #menuFilter .levelHolderClass, .mp-level {
        background-color:white !important;
        color:white;
    }

    /*#menuFilter li:hover {
        background-color:#54c5ff !important;
        border:0 !important;
    }*/


    #menuFilter li {
        border:0 !important;
        padding:0;
    }

    #menuFilter .multilevelpushmenu_wrapper a {
        color:#0094ff !important;
        border:0 !important;
        padding:9px;
    }

    .doubleList li:hover {
    }

    .backItemClass {
        background-color:white !important;
        color:#0094ff !important;
        border:0px !important;
    }
        .backItemClass a {
            font-size: medium !important;
        }
        /*.backItemClass:hover {
            background-color:#54c5ff !important;
        }*/

     .filterCheck::before {
        float:right;
        font-family: FontAwesome;
        /*font-size:large;*/
        content: "\f00c";
        color:white;
        padding-right:5px;
    }

    .filterCheck {
        background-color:#4cff00 !important;
        color:white !important; 
    }

    /*#menuFilter .filterCheck:hover {
        background-color:#a3ff7c !important;
    }*/

    .ui-autocomplete-input {
        visibility:hidden !important;
    }

    .inner-wrap {
        position:absolute;
        top:37px;
    }

</style>
